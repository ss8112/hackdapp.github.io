<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>HackDApp</title>
  
  <subtitle>Focus on DApp tutorials, Thinking growth, Mac skills, IndieMaker, etc.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.hackdapp.com/"/>
  <updated>2019-04-21T15:27:06.802Z</updated>
  <id>https://www.hackdapp.com/</id>
  
  <author>
    <name>zhangliang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>学习周报-16W: 解决焦虑的办法就是关注当下现实问题</title>
    <link href="https://www.hackdapp.com/archives/weekly16.html"/>
    <id>https://www.hackdapp.com/archives/weekly16.html</id>
    <published>2019-04-21T15:00:00.000Z</published>
    <updated>2019-04-21T15:27:06.802Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">不将问题化成简化的形式，无法求得解答。 -  约翰-皮尔庞特-摩根</span><br></pre></td></tr></table></figure><h2 id="👀️-见"><a href="#👀️-见" class="headerlink" title="👀️ 见"></a>👀️ 见</h2><ol><li><a href="https://weibo.com/p/1001603922841853642397?mod=zwenzhang" target="_blank" rel="noopener">我的产品设计开发工作の流 - 文章</a></li><li><a href="https://www.landinglion.com/" target="_blank" rel="noopener">Landing Lion - The web’s best way to build the web.</a><br>一个可以快速设计自己产品官网的在线制作网站，提供大量的模板供大家使用。强烈推荐。只不过要集成第三方插件或自定义域名的时候需要付费。</li><li><a href="https://docs.chatie.io/v/zh/api/wechaty" target="_blank" rel="noopener">Wechaty - Chatie</a> 、<a href="https://blog.chatie.io/" target="_blank" rel="noopener">https://blog.chatie.io/</a><br>微信机器人开发文档。可对微信群中的各种事件：加入群、退出群、群消息等事件进行监听记录</li><li><a href="https://mp.weixin.qq.com/s?__biz=MjM5MTQwNDc0MA==&amp;mid=207303185&amp;idx=1&amp;sn=36aca2fdcd6668c8f23f8da1795ae555&amp;scene=0#wechat_redirect" target="_blank" rel="noopener">如何建立读书笔记系统？</a></li><li><a href="https://www.gallaudet.edu/tutorial-and-instructional-programs/english-center/the-process-and-type-of-writing/pre-writing-writing-and-revising/the-note-card-system" target="_blank" rel="noopener">The Note Card System – Gallaudet University</a><br><img src="http://cdn.hackdapp.com/2019-04-21-152626.jpg" alt=""><img src="http://cdn.hackdapp.com/2019-04-21-152657.jpg" alt=""></li><li><a href="https://mythcreants.com/blog/three-excuses-to-use-office-supplies/" target="_blank" rel="noopener">Three Ways to Plot With Index Cards – Mythcreants</a></li><li><a href="https://www.geeksforgeeks.org/fundamentals-of-algorithms/#DynamicProgramming" target="_blank" rel="noopener">Algorithms - GeeksforGeeks</a></li><li><a href="https://www.tutorialspoint.com/compile_java8_online.php" target="_blank" rel="noopener">Online Java8 Compiler - Online Java8 Editor - Online Java8 IDE - Java8 Coding Online - Practice Java8 Online - Execute Java8 Online - Compile Java8 Online - Run Java8 Online</a></li></ol><h2 id="🌱-感"><a href="#🌱-感" class="headerlink" title="🌱 感"></a>🌱 感</h2><ul><li>焦虑只会将自己的大脑带向脱离实际的轨道，如果想解决焦虑那只有将思维拉回现实。</li></ul><h2 id="😕️-思"><a href="#😕️-思" class="headerlink" title="😕️ 思"></a>😕️ 思</h2><ol><li>为了很好将群里面有价值的信息进行内容沉淀，而自己又不可能一直盯着微信群。所以可以通过机器人自动将群里的信息同步到数据库，当周日进行内容总结时，只需要提取当周或当天信息就可以进行信息提取与内容整理了。另外，还可以解决需要通过手机客户端滚屏及复制内容的问题。</li></ol><h2 id="👟-行"><a href="#👟-行" class="headerlink" title="👟 行"></a>👟 行</h2><ol><li>制作卡片写作产品官网 <a href="http://100card.io" target="_blank" rel="noopener">http://100card.io</a></li><li>把问题缩小到真正具体的某一件事情上。 《内在成长》</li></ol><hr><p><strong>欢迎关注HackDApp博客或公众号</strong>, HackHook将持续为你分享IndieMaker成长路径、DAPP技术知识、高效Mac使用技巧、底层思维认知。</p><p>------------------------------------------------------------------------------<br>我的博客:     <a href="https://www.hackdapp.com/">https://www.hackdapp.com/</a><br>我的github:   <a href="https://github.com/hackdapp" target="_blank" rel="noopener">https://github.com/hackdapp</a><br>我的哔哩哔哩:   <a href="https://space.bilibili.com/17360859" target="_blank" rel="noopener">https://space.bilibili.com/17360859</a><br>我的微信公众号: hackdapp<img src="http://cdn.hackdapp.com/2019-04-03-mysign.jpg" alt=""><br>IndieMakers:  <a href="https://www.indiemakers.cn" target="_blank" rel="noopener">https://www.indiemakers.cn</a><br>------------------------------------------------------------------------------</p><p>联系邮箱：<a href="mailto:55269778@qq.com" target="_blank" rel="noopener">55269778@qq.com</a></p>]]></content>
    
    <summary type="html">
    
      我们为什么要产生焦虑？因为大脑过度猜测与推断外界因素，给自己大脑造成很多或许根本就不存在的外界压力。而这一切与现实情况可能并不相符，所以我们需要将目光拉回现实问题之中，关注如何解决当下问题才是解决焦虑的出路。
    
    </summary>
    
      <category term="学习周报(2019)" scheme="https://www.hackdapp.com/categories/%E5%AD%A6%E4%B9%A0%E5%91%A8%E6%8A%A5-2019/"/>
    
    
      <category term="内在成长" scheme="https://www.hackdapp.com/tags/%E5%86%85%E5%9C%A8%E6%88%90%E9%95%BF/"/>
    
  </entry>
  
  <entry>
    <title>学习周报-15W: (生财有术)扩大你的眼界，开天眼</title>
    <link href="https://www.hackdapp.com/archives/weekly15.html"/>
    <id>https://www.hackdapp.com/archives/weekly15.html</id>
    <published>2019-04-15T15:00:00.000Z</published>
    <updated>2019-04-16T03:07:08.057Z</updated>
    
    <content type="html"><![CDATA[<h2 id="👀️-见"><a href="#👀️-见" class="headerlink" title="👀️ 见"></a>👀️ 见</h2><h4 id="生财有术"><a href="#生财有术" class="headerlink" title="生财有术"></a>生财有术</h4><p>本周末过的还是比较充实，为什么这么说呢？因为周末专程跑去参加亦仁大佬组织的生财有术线下活动。对于我以前的经历来讲，从来不会也不可能专门为了一个活动让我跨程跑去。那这次为什么要去呢? 因为想要开天眼。想要从技术圈子的思维世界中，跳出去看看别人的思维方式。看一看在网络世界中大佬，在线下是怎么样一种情况，他们对于生财这一方面的思路与想法是怎么样子? 他们是如何进行资源流量变现的。</p><p>通过本次大会的参考，有几点比较大的收获：</p><ol><li>原来亦仁大佬在现场也是蛮紧张的，同时蛮佩服亦仁大佬对于资源的整合能力；</li><li>杨涛大佬的流量获取思考蛮值得学习的。真的是不能按常规思考问题，需要跳出思维束缚，时刻提醒息惯性思维的存在. e.g 通过发布出租房屋广告的方式，并通过设置不同的参数，以达到不同用户的流量获取。路径的设计简直是太棒了。在此告诫自己的一句话就是：不要对自己设限。</li><li>对于stromzhang的感觉就是：程序员出身、转产品而后对运营流量又有一定尝试。决定了他个人品牌的快速成型。其实对于每个程序员都是一种发展借鉴。</li><li>粥左罗  自媒体大佬。ps: 与想象中的不太一样。一定要从日常的行动中，慢慢打造形成自己的系统。比如：写作系统、SideProj系统等。系统化的好处在于经验的流程化沉淀与优化，让自己专门于每个小环节的精力投入，节省一些在重复性工作上的时间消耗。还有一点就是，打破自己的玻璃心，你不可能让所有人都喜欢你。</li><li>顾小北的分享自己最为感兴趣，算是给我最开天眼。自己可以尝试去做的一件事情。即： 如何使用faceboook打造爆款产品</li></ol><p>欢迎加入生财有术小密圈, 你的成长出乎你的想象。<a href="https://t.zsxq.com/ZZVRfaA" target="_blank" rel="noopener">https://t.zsxq.com/ZZVRfaA</a><br><img src="http://cdn.hackdapp.com/2019-04-15-004923.jpg" alt=""></p><h4 id="好玩"><a href="#好玩" class="headerlink" title="好玩"></a>好玩</h4><ul><li><a href="https://foreverspin.com/?c=ss1&amp;gclid=Cj0KCQjws5HlBRDIARIsAOomqA3HuvcqDTNMQ-KpEcd0LzFx5Dk7DRkkOxREPL-gVcO7HwUvI91cyIsaApo7EALw\_wcB" target="_blank" rel="noopener">ForeverSpin™ World Famous Metal Spinning Tops – Foreverspin.com</a></li><li><a href="https://medium.com/productmanagement101/spotify-squad-framework-part-i-8f74bcfcd761" target="_blank" rel="noopener">Spotify Squad framework — Part I – Product Management 101 – Medium</a><br><img src="http://cdn.hackdapp.com/2019-03-27-035414.jpg" alt=""></li><li><a href="https://www.affren.com/topics/15/stm-lun-tan-da-shen-finch-li-zuo-affiliate-marketing-wan-quan-zhi-nan-lian-zai-geng-xin" target="_blank" rel="noopener">STM 论坛大神 Finch 力作《Affiliate Marketing 完全指南》连载更新 | Affren.com 实时更新国外 Affiliate Mareting 和 Media Buy 教程 - Powered by PHPHub</a></li><li><a href="https://infinitest.github.io/" target="_blank" rel="noopener">Infinitest</a><br>基于IDEA的JAVA测试框架</li><li><a href="https://www.niceshop.me/categories/%E3%8A%95-%E5%87%BA%E6%B8%85%E7%89%B9%E5%83%B9%E5%8D%80" target="_blank" rel="noopener">出清特價區</a><br>考虑自己也设计一下对应的在线个人商店</li></ul><hr><h2 id="🌱-感"><a href="#🌱-感" class="headerlink" title="🌱 感"></a>🌱 感</h2><p>南方人比北方人的思维感觉要活跃不少，尤其对于在生意这块。<br>持续的在一件事情上投入大量的时间与精力，你明显可以从文字或成就上体会到与去年自己的成长差距。比如：以前还纠结如何写一篇文章，那简直是各种难产；但现在看来就要好不少，一是在于通过时间的锻炼；二是在于对系统方法论的总结；而且在这个过程中也慢慢培养了自己的自我内心动力等等</p><h2 id="😕️-思"><a href="#😕️-思" class="headerlink" title="😕️ 思"></a>😕️ 思</h2><ol><li>保持对金钱的渴望</li><li>如何打造自己的业务矩阵（视频+商店+营销+IP）</li></ol><h2 id="👟-行"><a href="#👟-行" class="headerlink" title="👟 行"></a>👟 行</h2><ol><li>就如顾小北一般，能将跑步坚持八年。其实将一件极其简单的事情能够坚持做到四五年，你就算比较牛的人了。</li><li>对事情的优先级设定，然后按步骤一个个去做</li></ol><hr><p><strong>欢迎关注HackDApp博客或公众号</strong>, HackHook将持续为你分享IndieMaker成长路径、DAPP技术知识、高效Mac使用技巧、底层思维认知。</p><p>------------------------------------------------------------------------------<br>我的博客:     <a href="https://www.hackdapp.com/">https://www.hackdapp.com/</a><br>我的github:   <a href="https://github.com/hackdapp" target="_blank" rel="noopener">https://github.com/hackdapp</a><br>我的哔哩哔哩:   <a href="https://space.bilibili.com/17360859" target="_blank" rel="noopener">https://space.bilibili.com/17360859</a><br>我的微信公众号: hackdapp<img src="http://cdn.hackdapp.com/2019-04-03-mysign.jpg" alt=""><br>IndieMakers:  <a href="https://www.indiemakers.cn" target="_blank" rel="noopener">https://www.indiemakers.cn</a><br>------------------------------------------------------------------------------</p><p>联系邮箱：<a href="mailto:55269778@qq.com" target="_blank" rel="noopener">55269778@qq.com</a></p>]]></content>
    
    <summary type="html">
    
      当你在一个圈子内发现无法获得成长时，你需要警惕自己是不是已经在一个坑之中，因为身边的参照物同样也可以在坑之中。而在这个问题之中，你首先需要知道坑的存在，然后，就需要通过一个方式进行坑的破局。破局的方式便是需要通过一个更加优质的圈子或人或事，让你开眼界，让自己有一个爬出井沿看新世界的机会。
    
    </summary>
    
      <category term="学习周报(2019)" scheme="https://www.hackdapp.com/categories/%E5%AD%A6%E4%B9%A0%E5%91%A8%E6%8A%A5-2019/"/>
    
    
      <category term="生财有术" scheme="https://www.hackdapp.com/tags/%E7%94%9F%E8%B4%A2%E6%9C%89%E6%9C%AF/"/>
    
      <category term="流量变现" scheme="https://www.hackdapp.com/tags/%E6%B5%81%E9%87%8F%E5%8F%98%E7%8E%B0/"/>
    
      <category term="出海计划" scheme="https://www.hackdapp.com/tags/%E5%87%BA%E6%B5%B7%E8%AE%A1%E5%88%92/"/>
    
      <category term="顾小北" scheme="https://www.hackdapp.com/tags/%E9%A1%BE%E5%B0%8F%E5%8C%97/"/>
    
      <category term="亦仁大佬" scheme="https://www.hackdapp.com/tags/%E4%BA%A6%E4%BB%81%E5%A4%A7%E4%BD%AC/"/>
    
  </entry>
  
  <entry>
    <title>学习周报-14W: 找到自己合适的节奏感</title>
    <link href="https://www.hackdapp.com/archives/weekly14.html"/>
    <id>https://www.hackdapp.com/archives/weekly14.html</id>
    <published>2019-04-07T15:00:00.000Z</published>
    <updated>2019-04-07T15:09:42.242Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>有时候，你会发现自己事先制定的好的计划，而且也持续坚持一段时间了。但有一天出现一个打乱自己计划的事情，且这件事情还比较耗费自己的时间与精力，需要让你与之前计划中的事情做一个选择。通常我们会告诉自己当下新出现的事情那绝对是特别重要的，先把之前的停掉等手头的工作处理完之后，再继续做之前计划的事情。但你会发现当手头的事完事之后，之前计划的事情也放弃了。</p></blockquote><blockquote><p>经历过如此之多的事情与反思之后，明白计划本身不是一定要按照原有的时间安排去依计行事，而相反其实是为了应对更多风险，更好的把事情完成好，所以在制定计划时，一定要考虑风险因素进去。这样可以适当的对自己的计划之事做一下适宜调整。</p></blockquote><h2 id="👀️-见"><a href="#👀️-见" class="headerlink" title="👀️ 见"></a>👀️ 见</h2><ul><li><a href="https://www.chiphell.com/thread-1731056-1-1.html" target="_blank" rel="noopener">一个美工的简单home，历时大半年的现代新居毕业（2018更新） - 品质家居 - Chiphell - 分享与交流用户体验</a></li><li><a href="https://mp.weixin.qq.com/s/F8tlpkBBRpza-OovB-B4Dg" target="_blank" rel="noopener">超级数字力</a></li><li><a href="https://mp.weixin.qq.com/s/SFSAX02Fbrkt1Zos3OdOEg?" target="_blank" rel="noopener">家装设计前你考虑过这99件事儿吗？</a></li><li><a href="https://www.jianshu.com/p/86557c34b671" target="_blank" rel="noopener">Hexo Seo优化让你的博客在google搜索排名第一 - 简书</a></li><li><a href="https://wenku.baidu.com/view/ba3ea51e81c758f5f71f67da.html" target="_blank" rel="noopener">水平思考与垂直思考 - 百度文库</a></li><li>要想培养孩子的抗打击能力，关键不在于什么穷养富养，而在于三条：1，让孩子感到他很重要，别人关注他、关心他、依靠他；2，给孩子陪伴；3，跟孩子分享记忆，回顾家族历史 —— 特别是艰难的历史。   </li><li><a href="https://mp.weixin.qq.com/s/QGP-VM9KI0jUmX2-PnWCxQ?" target="_blank" rel="noopener">清单｜拿下目标职位的16个必杀技</a></li><li><a href="https://mp.weixin.qq.com/s?__biz=MjM5MTQwNDc0MA==&amp;mid=207303185&amp;idx=1&amp;sn=36aca2fdcd6668c8f23f8da1795ae555&amp;scene=0#wechat_redirect" target="_blank" rel="noopener">如何建立读书笔记系统？</a></li><li><a href="https://www.gatesnotes.com/Books" target="_blank" rel="noopener">Learn more about Books | Bill Gates</a></li><li><a href="https://mp.weixin.qq.com/s?__biz=MjM5MTQwNDc0MA==&amp;mid=207303185&amp;idx=1&amp;sn=36aca2fdcd6668c8f23f8da1795ae555&amp;scene=0#wechat_redirect" target="_blank" rel="noopener">使用卡片收集读书精华</a></li><li>J1900软路由</li><li><a href="https://weibo.com/p/1001603922841853642397?mod=zwenzhang" target="_blank" rel="noopener">我的产品设计开发工作の流 - 文章</a></li></ul><h2 id="🌱-感"><a href="#🌱-感" class="headerlink" title="🌱 感"></a>🌱 感</h2><p>越是忙，越是要分配好自己时间精力投入</p><p>即使让我重新选择，依旧还是会选择今天所走的路。只不过需要需要反思的是是否有更好的方式来达到此种目的。</p><h2 id="😕️-思"><a href="#😕️-思" class="headerlink" title="😕️ 思"></a>😕️ 思</h2><p>要注意平凡日子里的点滴投入，这才是铸就你不平凡的核心。</p><h2 id="👟-行"><a href="#👟-行" class="headerlink" title="👟 行"></a>👟 行</h2><p>提高效率，不要太在乎前期的是否完美。在改的过程中，去完善它。</p><hr><p><strong>欢迎关注HackDApp博客或公众号</strong>, HackHook将持续为你分享IndieMaker成长路径、DAPP技术知识、高效Mac使用技巧、底层思维认知。</p><p>------------------------------------------------------------------------------<br>我的博客:     <a href="https://www.hackdapp.com/">https://www.hackdapp.com/</a><br>我的github:   <a href="https://github.com/hackdapp" target="_blank" rel="noopener">https://github.com/hackdapp</a><br>我的哔哩哔哩:   <a href="https://space.bilibili.com/17360859" target="_blank" rel="noopener">https://space.bilibili.com/17360859</a><br>我的微信公众号: hackdapp<img src="http://cdn.hackdapp.com/2019-04-03-mysign.jpg" alt=""><br>IndieMakers:  <a href="https://www.indiemakers.cn" target="_blank" rel="noopener">https://www.indiemakers.cn</a><br>------------------------------------------------------------------------------</p><p>联系邮箱：<a href="mailto:55269778@qq.com" target="_blank" rel="noopener">55269778@qq.com</a></p>]]></content>
    
    <summary type="html">
    
      本周最大的收获就是：通过学习周报的形式，不仅可以清空我的信息收集箱，还可以归档这些信息，贵在于对信息的价值过滤。让更多的人看到一些精华东西。
    
    </summary>
    
      <category term="学习周报(2019)" scheme="https://www.hackdapp.com/categories/%E5%AD%A6%E4%B9%A0%E5%91%A8%E6%8A%A5-2019/"/>
    
    
      <category term="陀螺" scheme="https://www.hackdapp.com/tags/%E9%99%80%E8%9E%BA/"/>
    
  </entry>
  
  <entry>
    <title>C++简单程序入门</title>
    <link href="https://www.hackdapp.com/archives/simple_cpllus_code.html"/>
    <id>https://www.hackdapp.com/archives/simple_cpllus_code.html</id>
    <published>2019-04-04T04:00:00.000Z</published>
    <updated>2019-04-04T23:34:37.821Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* filename: myapp.cpp</span></span><br><span class="line"><span class="comment">   date: 2019-01-28 3:06 PM</span></span><br><span class="line"><span class="comment">   auth: 55269778@qq.com */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;//定义头文件</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;<span class="comment">//命令空间, 简化后续变量或方法调用。e.g. std::string 等同于 string</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> msg = <span class="string">"hi, my first dapp"</span>; <span class="comment">//定义变量</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; msg &lt;&lt;<span class="built_in">endl</span>;<span class="comment">//打印字符串</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//tryit: http://tpcg.io/Tulum1</span></span><br></pre></td></tr></table></figure><p>以上代码便是C++最简单可运行的最小示例。基本包含了在程序结构中所必须的一些语言特性。</p><p>根据上述程序结构，我们可以大致将它拆分成五部分内容：</p><h2 id="1-include-lt-iostream-gt"><a href="#1-include-lt-iostream-gt" class="headerlink" title="1. #include &lt;iostream&gt;"></a>1. <code>#include &lt;iostream&gt;</code></h2><p>头文件定义主要用于引用第三方函数库，通过调用第三方函数可以减少开发代码量，提高开发效率，同时也避免了不必要的重复造轮子。</p><p>比如：通过引用\&lt;cmath>库，可以帮助我们快速使用里面的函数进行一些数学运算。</p><p><img src="https://ws3.sinaimg.cn/large/006tNc79ly1fzmer35re6j30l30j6myt.jpg" alt=""></p><p>所以，后续我们需要学会便是如何查阅C</p><h2 id="2-int-main"><a href="#2-int-main" class="headerlink" title="2. int main()"></a>2. <code>int main()</code></h2><p><code>main</code>函数区别于其它普通函数之处在于: main函数默认被系统定义为应用入口调用方法。除此之外，与其他函数无任何区别。</p><pre><code>#include &lt;iostream&gt;#include &lt;stdlib.h&gt;using namespace std;string sayHi(string username){    return string(&quot;hi, &quot;).append(username).append(&quot;!&quot;);}int main(){    cout &lt;&lt; sayHi(&quot;www.hackdapp.com&quot;) &lt;&lt;endl;}//tryit: http://tpcg.io/uHUkzy</code></pre><p>函数定义，其实对于所有编程语言的定义方式大致相同, 都可以表现为以下形式</p><pre><code>&lt;返回类型|void&gt; 方法名(参数定义1, 参数定义2，参数定义...){    //do some stuff    return &lt;返回数据&gt;}</code></pre><p>如果你之前已经在使用其他编程语言，那么应该对于C++其实也可以很好的理解它的程序结构。</p><p>注： 后续我们会详细介绍函数的多种定义及使用方式，包括形参实参、重载以及虚函数等。</p><h2 id="3-string-message-quot-hi-my-first-app-quot"><a href="#3-string-message-quot-hi-my-first-app-quot" class="headerlink" title="3. string message = &quot;hi, my first app&quot;"></a>3. <code>string message = &quot;hi, my first app&quot;</code></h2><p>变量定义，在程序开发过程，往往需要定义一些临时变量，用于存储在数据逻辑处理过程所必须的临时存储。</p><p>而变量的类型，主要分为字符、整型，长/短整型、单精度、双精度、布尔类型以及字符串。<br>我们在实际应用场景中，需要明确了解与知道这些基础数据类型的定义及边界范围，比如，无符号整型、单精度。</p><p>尤其是对数字类型的字段，如果不了解其边界范围，很可能会导致运算溢出等问题，特别是在合约开发过程中，数字溢出很可能导致的便是相当大的经济损失。</p><p>换个角度讲，合理的使用变量类型，也可能在一定程序中节省资源的浪费。因为在EOS合约中存储数据是需要消耗资源的。</p><p>另外，对于变量的名称定义，其名称只能是由数字、字母以及下划线组成且不可能以数字开头，而且根据不同平台，对于名称的长度其实也是存在限制的。</p><h2 id="4-cout-lt-lt-msg-lt-lt-endl"><a href="#4-cout-lt-lt-msg-lt-lt-endl" class="headerlink" title="4. cout &lt;&lt; msg &lt;&lt;endl"></a>4. <code>cout &lt;&lt; msg &lt;&lt;endl</code></h2><p><code>cout</code>是<code>iostream</code>函数库中的一个流数据输出函数，一般用于在程序调用过程向控制台输入一些调试信息；与此对应的是<code>cin</code>, 用于接收输入数据流。</p><p>不过, 在EOS合约中无法调用此函数。举而代之的是，EOSLIB库自己封装的<code>print</code>函数.</p><h2 id="5-单行注解-or-多行注解"><a href="#5-单行注解-or-多行注解" class="headerlink" title="5. //单行注解 or /*多行注解*/"></a>5. <code>//单行注解 or /*多行注解*/</code></h2><p>在程序开发过程，往往需要通过语言描述某个代码文件所要实现的整体功能或者某个函数的功能、参数及约束说明。这时候就需要用到注解。</p><p>而注解同样也所有的编程语言中也大致相同，一般分为单行注释与多行注释。</p><p>单行注释适用于短小的描述某一行运行逻辑；而多行注释多用于描述函数说明以及文件功能说明。</p>]]></content>
    
    <summary type="html">
    
      C++简单程序入门. 以最简单的示例代码，为你拆解其脉络结构。上手C++对你来说，那不是难事。
    
    </summary>
    
      <category term="EOS完全开发指南" scheme="https://www.hackdapp.com/categories/EOS%E5%AE%8C%E5%85%A8%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97/"/>
    
    
      <category term="EOS完全开发指南" scheme="https://www.hackdapp.com/tags/EOS%E5%AE%8C%E5%85%A8%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97/"/>
    
  </entry>
  
  <entry>
    <title>零基础体验EOS入门合约开发</title>
    <link href="https://www.hackdapp.com/archives/try_eoscontract_dev.html"/>
    <id>https://www.hackdapp.com/archives/try_eoscontract_dev.html</id>
    <published>2019-04-03T23:00:00.000Z</published>
    <updated>2019-04-03T23:32:25.234Z</updated>
    
    <content type="html"><![CDATA[<p>本教程主要面向初阶开发人员，目的在于带领大家以最简单的示例合约，通过简单但不失完整的流程，体验整个合约的编译、发布与调用过程，从而让大家从直观角度有个清晰的概念认识。</p><hr><p><strong>版本说明</strong><br>测试网公链版本:    v1.7.0-dirty<br>EOSjS-SDK版本：16.0.9<br>开发组件包(CDT):  1.5.0</p><hr><h2 id="一、帐户管理"><a href="#一、帐户管理" class="headerlink" title="一、帐户管理"></a>一、帐户管理</h2><h3 id="1-Register-EOS-Account"><a href="#1-Register-EOS-Account" class="headerlink" title="1. Register EOS Account"></a>1. Register EOS Account</h3><h4 id="生成公私钥"><a href="#生成公私钥" class="headerlink" title="生成公私钥"></a>生成公私钥</h4><p>在进行帐户注册时，需要事先提供一对公私钥地址，以便在注册帐号时进行绑定使用。可通过<a href="https://nadejde.github.io/eos-token-sale/" target="_blank" rel="noopener">EOS Key Generation</a>网站进行公私钥地址生成。<br><img src="http://cdn.hackdapp.com/2019-03-26-061513.png" alt=""><br><img src="http://cdn.hackdapp.com/2019-03-26-061448.png" alt=""></p><h4 id="注册帐户"><a href="#注册帐户" class="headerlink" title="注册帐户"></a>注册帐户</h4><p>通过<a href="http://monitor.jungletestnet.io/#home" target="_blank" rel="noopener">Jungle2.0 - EOS Test Network Monitor (CryptoLions.io)</a>网站进行EOS帐户的创建<br><img src="http://cdn.hackdapp.com/2019-03-26-061701.jpg" alt=""><br>点击图中标红<strong>create account</strong>, 在弹出界面中，填写事先生成的公钥地址<br><img src="http://cdn.hackdapp.com/2019-03-26-062433.jpg" alt=""><br><img src="http://cdn.hackdapp.com/2019-03-26-063220.jpg" alt=""><br>见上图中，需要填写三个信息，其中account name主要用于填写我们易于记忆的帐户名称，但其帐户名称长度只允许12位长度，且其组成字符也只能从a-z, 1-5以及一个点符号组成。<br>至于owner public key和 active public key分别对应该帐户owner权限和active权限。如果从安全角度讲，两个权限所对应的公钥地址应该设置成不一样的，这样当active private key丢失的时候，可以使用ower权限对active权限对应的公钥地址进行更换。因为ower和active权限是有层次关系的，只允许低级权限对下次权限进行操作。在不丢失ower私钥的情况下，也可以实现对ower权限地址的更换操作。</p><p>点击<strong>create</strong>, 创建成功后，会显示如下信息<br><img src="http://cdn.hackdapp.com/2019-03-26-063306.jpg" alt=""></p><h3 id="2-Claim-EOS"><a href="#2-Claim-EOS" class="headerlink" title="2. Claim EOS"></a>2. Claim EOS</h3><p><img src="http://cdn.hackdapp.com/2019-03-26-063552.jpg" alt=""><br>在<a href="http://monitor.jungletestnet.io/#home" target="_blank" rel="noopener">Jungle2.0 - EOS Test Network Monitor (CryptoLions.io)</a>页面，点击菜单栏中的<strong>Faucet</strong>按钮，会弹出如下界面<br><img src="http://cdn.hackdapp.com/2019-03-26-063708.jpg" alt=""></p><h3 id="3-Balance-Query"><a href="#3-Balance-Query" class="headerlink" title="3. Balance Query"></a>3. Balance Query</h3><p><img src="2019-03-26%20at%2014.37.jpg" alt=""><br>在<a href="http://monitor.jungletestnet.io/#home" target="_blank" rel="noopener">Jungle2.0 - EOS Test Network Monitor (CryptoLions.io)</a>页面，点击菜单栏中的<strong>account info</strong>按钮，弹出如下界面：<br><img src="http://cdn.hackdapp.com/2019-03-26-064031.jpg" alt=""><br>填写帐号名称后，点击<strong>get</strong>按钮, 便可以查到该用户的EOS余额及公钥地址信息。</p><h3 id="4-Install-Chrome-Plugin-Scatter"><a href="#4-Install-Chrome-Plugin-Scatter" class="headerlink" title="4. Install Chrome Plugin: Scatter"></a>4. Install Chrome Plugin: Scatter</h3><h4 id="安装scatter"><a href="#安装scatter" class="headerlink" title="安装scatter"></a>安装scatter</h4><p>在chrome浏览器中安装<a href="https://chrome.google.com/webstore/detail/scatter/ammjpmhgckkpcamddpolhchgomcojkle?hl=zh-CN" target="_blank" rel="noopener">Chrome 网上应用店 - scatter</a>插件。<br><img src="http://cdn.hackdapp.com/2019-04-03-024637.jpg" alt=""></p><p><strong>注: </strong> 如果Chrome插件商店无法打开，则可以使用<a href="https://chrome-extension-downloader.com/" target="_blank" rel="noopener">Start | Chrome Extension Downloader</a>进行下载。scatter插件地址: <a href="https://chrome.google.com/webstore/detail/scatter/ammjpmhgckkpcamddpolhchgomcojkle?hl=zh-CN" target="_blank" rel="noopener">https://chrome.google.com/webstore/detail/scatter/ammjpmhgckkpcamddpolhchgomcojkle?hl=zh-CN</a><br><img src="http://cdn.hackdapp.com/2019-04-03-025150.jpg" alt=""></p><p>插件安装完成后，可以chrome浏览器中看到如下高亮图标。<br><img src="http://cdn.hackdapp.com/2019-04-03-024247.jpg" alt=""></p><h4 id="使用scatter"><a href="#使用scatter" class="headerlink" title="使用scatter"></a>使用scatter</h4><ul><li><p>初始化scatter帐户<br>  填写密码，然后点击创建按钮<br>  <img src="http://cdn.hackdapp.com/2019-04-03-025355.jpg" alt=""><br>  点击创建操作后，会显示如下界面，提示保存12个助记词<br>  <img src="http://cdn.hackdapp.com/2019-04-03-025441.jpg" alt=""><br>  大家需要保存好这12个助词词，以便于在忘记密码时用助记词进行恢复。注：丢失此助记词则意味着你将永远丢失该帐户。  </p></li><li><p>添加测试网络<br>  首先、打开主界面后，点击右上解<strong>系统设置</strong><br>  <img src="http://cdn.hackdapp.com/2019-04-03-025951.jpg" alt=""><br>  然后，选择网络，新建网络<br>  <img src="http://cdn.hackdapp.com/2019-04-03-030455.jpg" alt=""><br>  填入测试网络的参数信息，比如: <a href="http://jungle2.cryptolions.io:80" target="_blank" rel="noopener">http://jungle2.cryptolions.io:80</a>、chainid: e70aaab8997e1dfce58fbfac80cbbb8fecec7b99cf982a9444273cbc64c41473<br>  chaind的获取方式，可以直接通过<a href="http://jungle2.cryptolions.io/v1/chain/get_info" target="_blank" rel="noopener">http://jungle2.cryptolions.io/v1/chain/get_info</a>进行查询<br>  <img src="http://cdn.hackdapp.com/2019-04-03-031702.jpg" alt=""></p></li><li>导入公私钥<br>  回到主界面，选择<strong>Key Pairs</strong>， 然后导入之前创建的私钥<br>  <img src="http://cdn.hackdapp.com/2019-04-03-031150.jpg" alt=""></li><li>绑定EOS帐户<br>  <img src="http://cdn.hackdapp.com/2019-04-03-031446.jpg" alt=""><img src="http://cdn.hackdapp.com/2019-04-03-031901.jpg" alt=""> <img src="http://cdn.hackdapp.com/2019-04-03-032105.jpg" alt="">  </li></ul><h3 id="5-Buy-RAM、CPU、NET"><a href="#5-Buy-RAM、CPU、NET" class="headerlink" title="5. Buy(RAM、CPU、NET )"></a>5. Buy(RAM、CPU、NET )</h3><p>访问<a href="https://jungle.eosx.io/tools/ram/buy?symbol=10" target="_blank" rel="noopener">内存交易 - 钱包 - EOSX - Fastest EOS Block Explorer</a>网站，绑定scatter帐号</p><p><img src="2019-03-26%20at%2016.44.jpg" alt=""><img src="2019-03-26%20at%2016.23.jpg" alt="">   </p><p><strong>购买RAM</strong><br><img src="http://cdn.hackdapp.com/2019-03-26-085239.jpg" alt=""><br><strong>购买CPU与NET资源</strong><br><img src="http://cdn.hackdapp.com/2019-03-26-085429.jpg" alt=""></p><h2 id="二、合约开发"><a href="#二、合约开发" class="headerlink" title="二、合约开发"></a>二、合约开发</h2><h3 id="1-编写示例合约"><a href="#1-编写示例合约" class="headerlink" title="1. 编写示例合约"></a>1. 编写示例合约</h3><p>在本地创建一个工程目录<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">~&gt; mkdir -p mycontract/&#123;utils, contracts&#125;</span><br><span class="line">~&gt; tree</span><br><span class="line">.</span><br><span class="line">├── contracts</span><br><span class="line">└── utils</span><br></pre></td></tr></table></figure></p><p>在工程目录contracts文件下，创建hello.cpp,<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~&gt; touch contracts/hello.cpp</span><br></pre></td></tr></table></figure></p><p>打开hello.cpp， 填写以下内容<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include &lt;eosiolib/eosio.hpp&gt;</span></span><br><span class="line"></span><br><span class="line">using namespace eosio;</span><br><span class="line"></span><br><span class="line">class [[eosio::contract]] hello : public contract &#123;</span><br><span class="line">  public:</span><br><span class="line">      using contract::contract;</span><br><span class="line"></span><br><span class="line">      [[eosio::action]]</span><br><span class="line">      void hi( name user ) &#123;</span><br><span class="line">         <span class="built_in">print</span>( <span class="string">"Hello, "</span>, user);</span><br><span class="line">      &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">EOSIO_DISPATCH(hello, (hi))</span><br></pre></td></tr></table></figure></p><h3 id="2-编译合约"><a href="#2-编译合约" class="headerlink" title="2. 编译合约"></a>2. 编译合约</h3><p>该步骤需要用到EOS合约开发所必需的cdt开发工具包， 来完成对示例合约的编译工作。</p><p>1）在本地安装eosio-cpp工具命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">brew tap eosio/eosio.cdt //增加仓库</span><br><span class="line">brew install eosio.cdt //安装工具包</span><br></pre></td></tr></table></figure></p><p>注： 可使用<strong>eosin-cpp –help</strong>命令来查看所有参数说明</p><p>2）进行合约编译，生成abi合约描述文件及wasm合约文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eosio-cpp -abigen <span class="string">'contracts/hello.cpp'</span> -o <span class="string">'contracts/hello.wasm'</span> --contract <span class="string">'hackdappcom1'</span></span><br></pre></td></tr></table></figure></p><p>编译完成后，会在工程目录生成hello.abi、hello.wasm两个编译文件。hello.abi就好比webservice中的wsdl描述语言一样，主要用于对合约接口及数据结构进行结构性描述， wasm文件为合约编译后的二进制文件。</p><p><strong>ABI文件详细说明</strong>: <a href="https://www.hackdapp.com/archives/eosdev_contract_abi.html">剖析EOS合约编译ABI文件 | HackDApp</a></p><h3 id="3-发布合约"><a href="#3-发布合约" class="headerlink" title="3. 发布合约"></a>3. 发布合约</h3><h4 id="初始化项目工程，并安装eosjs-sdk"><a href="#初始化项目工程，并安装eosjs-sdk" class="headerlink" title="初始化项目工程，并安装eosjs-sdk"></a>初始化项目工程，并安装eosjs-sdk</h4><p>使用<code>npm init</code>命令对项目进行初始化<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">~&gt; npm init</span><br><span class="line">package name: (mycontract)</span><br><span class="line">version: (1.0.0)</span><br><span class="line">description:</span><br><span class="line">entry point: (index.js)</span><br><span class="line"><span class="built_in">test</span> <span class="built_in">command</span>:</span><br><span class="line">git repository:</span><br><span class="line">keywords:</span><br><span class="line">author:</span><br><span class="line">license: (ISC)</span><br><span class="line">About to write to /Users/nolan/Desktop/mycontract/package.json:</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"name"</span>: <span class="string">"mycontract"</span>,</span><br><span class="line">  <span class="string">"version"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line">  <span class="string">"description"</span>: <span class="string">""</span>,</span><br><span class="line">  <span class="string">"main"</span>: <span class="string">"index.js"</span>,</span><br><span class="line">  <span class="string">"scripts"</span>: &#123;</span><br><span class="line">    <span class="string">"test"</span>: <span class="string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"author"</span>: <span class="string">""</span>,</span><br><span class="line">  <span class="string">"license"</span>: <span class="string">"ISC"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>然后，使用<code>npm install eosjs@16.0.9</code>命令进行eos sdk组件安装<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~&gt; npm install eosjs@16.0.9</span><br></pre></td></tr></table></figure></p><p>安装完成后， 整个项目工程目录结构显示如下:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">~&gt; tree</span><br><span class="line">.</span><br><span class="line">├── contracts//合约文件</span><br><span class="line">├── node_modules//依赖组件</span><br><span class="line">├── package-lock.json</span><br><span class="line">├── package.json//工程配置定义</span><br><span class="line">└── utils//工具库</span><br><span class="line"></span><br><span class="line">3 directories, 2 files</span><br></pre></td></tr></table></figure></p><h4 id="编辑合约发布文件：-deploy-js"><a href="#编辑合约发布文件：-deploy-js" class="headerlink" title="编辑合约发布文件： deploy.js"></a>编辑合约发布文件： deploy.js</h4><p>首先，在工程根目录下，创建deploy.js；<br>然后，打开该文件，并填下以下内容；<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">const eos = require(<span class="string">'./utils/eossdk'</span>)(&#123;</span><br><span class="line">  chainId: <span class="string">"e70aaab8997e1dfce58fbfac80cbbb8fecec7b99cf982a9444273cbc64c41473"</span>,</span><br><span class="line">  httpEndpoint: <span class="string">"http://jungle2.cryptolions.io:80"</span>,</span><br><span class="line">  //更改处一： EOS合约Active权限权限</span><br><span class="line">  keyProvider: <span class="string">"5JxqGao9rzXWBUDnNzALyxaFdmZYXiZ46EzHL4sJkHkryzCFKxu"</span>, // 更改处二： 改为要发布的合约帐户名称</span><br><span class="line">  authorization: <span class="string">'hackdappcom1@active'</span>,</span><br><span class="line">  broadcast: <span class="literal">true</span>,</span><br><span class="line">  sign: <span class="literal">true</span></span><br><span class="line">&#125;)</span><br><span class="line">const &#123;deployContract&#125; = require(<span class="string">'./utils/common'</span>)</span><br><span class="line"></span><br><span class="line">//更改处三：改为要发布的合约帐户名称</span><br><span class="line">deployContract(eos, &#123; account: <span class="string">"hackdappcom1"</span>, contractDir: <span class="string">"./contracts"</span> &#125;).<span class="keyword">then</span>((result) =&gt; &#123;</span><br><span class="line">    console.log(`Deployment successful`, JSON.stringify(result, null , 4))</span><br><span class="line">&#125;)</span><br><span class="line">.catch(err =&gt; &#123;</span><br><span class="line">    console.error(`Deployment failed`, err)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>最后，根据自己的帐户信息进行参数更改。</p><p>注：deploy.js文件头引入的两个文件<a href="https://gist.github.com/hackdapp/246bc1b9998e7f0f5b12b04a96585081" target="_blank" rel="noopener">eossdk</a>、<a href="https://gist.github.com/hackdapp/b200b70b1e5d32fa9e7ae1fc082681cc" target="_blank" rel="noopener">common.js</a>可直接点击链接下载，并放入工程目录utils文件夹中。</p><h4 id="执行合约发布"><a href="#执行合约发布" class="headerlink" title="执行合约发布"></a>执行合约发布</h4><p>编辑完成deploy.js相关参数数据， 通过node命令进行合约发布。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node deploy.js</span><br></pre></td></tr></table></figure></p><p>运行命令之后，如果发布成功，会显示以下日志信息：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">Deployment successful</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">"broadcast"</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="string">"transaction"</span>: &#123;</span><br><span class="line">            <span class="string">"compression"</span>: <span class="string">"none"</span>,</span><br><span class="line">            <span class="string">"transaction"</span>: &#123;</span><br><span class="line">                <span class="string">"expiration"</span>: <span class="string">"2019-04-03T06:50:55"</span>,</span><br><span class="line">                <span class="string">"ref_block_num"</span>: 25564,</span><br><span class="line">                <span class="string">"ref_block_prefix"</span>: 1344811314,</span><br><span class="line">                <span class="string">"max_net_usage_words"</span>: 0,</span><br><span class="line">                <span class="string">"max_cpu_usage_ms"</span>: 0,</span><br><span class="line">                <span class="string">"delay_sec"</span>: 0,</span><br><span class="line">                <span class="string">"context_free_actions"</span>: [],</span><br><span class="line">......</span><br><span class="line">                   <span class="string">"account_ram_deltas"</span>: [</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="string">"account"</span>: <span class="string">"hackdappcom1"</span>,</span><br><span class="line">                            <span class="string">"delta"</span>: -27</span><br><span class="line">                        &#125;</span><br><span class="line">                    ],</span><br><span class="line">                    <span class="string">"except"</span>: null,</span><br><span class="line">                    <span class="string">"inline_traces"</span>: []</span><br><span class="line">                &#125;</span><br><span class="line">            ],</span><br><span class="line">            <span class="string">"except"</span>: null</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><h3 id="4-合约调用"><a href="#4-合约调用" class="headerlink" title="4. 合约调用"></a>4. 合约调用</h3><p>在确保合约发布成功之后，开始编写合约调用文件 invoke.js<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~&gt; touch invoke.js</span><br></pre></td></tr></table></figure></p><p>打开invoke.js, 填入以下代码：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">const eos = require(<span class="string">'./utils/eossdk'</span>)(&#123;</span><br><span class="line">  chainId: <span class="string">"e70aaab8997e1dfce58fbfac80cbbb8fecec7b99cf982a9444273cbc64c41473"</span>,</span><br><span class="line">  httpEndpoint: <span class="string">"http://jungle2.cryptolions.io:80"</span>,</span><br><span class="line">  keyProvider: <span class="string">"5JxqGao9rzXWBUDnNzALyxaFdmZYXiZ46EzHL4sJkHkryzCFKxu"</span>,</span><br><span class="line">  authorization: <span class="string">'hackdappcom1@active'</span>,</span><br><span class="line">  broadcast: <span class="literal">true</span>,</span><br><span class="line">  sign: <span class="literal">true</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">const data = &#123;</span><br><span class="line">actions: [</span><br><span class="line">&#123;</span><br><span class="line">      account: <span class="string">'hackdappcom1'</span>,</span><br><span class="line">      name: <span class="string">'hi'</span>,</span><br><span class="line">      authorization: [&#123;</span><br><span class="line">          actor: <span class="string">'hackdappcom1'</span>,</span><br><span class="line">          permission: <span class="string">'active'</span></span><br><span class="line">      &#125;],</span><br><span class="line">      data: &#123;<span class="string">"user"</span>: <span class="string">"222"</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line">eos.transaction(data).<span class="keyword">then</span>((result)=&gt;&#123;</span><br><span class="line">    console.log(JSON.stringify(result.processed.action_traces[0].console, null, 4))</span><br><span class="line">  &#125;).catch((err)=&gt;&#123;</span><br><span class="line">    console.log(err)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure></p><p>执行调用命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node invoke.js</span><br></pre></td></tr></table></figure></p><p>如果能够正常运行，则会显示以下内容信息<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"Hello, 222"</span></span><br></pre></td></tr></table></figure></p><p>另外，针对教程中出现的代码，我提供了完整的工程代码示例及文字稿教程。大家可点击链接或者直接克隆到本地进行查看。项目地址: <a href="https://github.com/hackdapp/learn_eos" target="_blank" rel="noopener">https://github.com/hackdapp/learn_eos</a></p><hr><h2 id="可能出现的问题："><a href="#可能出现的问题：" class="headerlink" title="可能出现的问题："></a><strong>可能出现的问题</strong>：</h2><ol><li>如果你没有事先购买RAM资源，可以会提示以下错误信息 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"code"</span>: 500,</span><br><span class="line">  <span class="string">"message"</span>: <span class="string">"Internal Service Error"</span>,</span><br><span class="line">  <span class="string">"error"</span>: &#123;</span><br><span class="line">    <span class="string">"code"</span>: 3080001,</span><br><span class="line">    <span class="string">"name"</span>: <span class="string">"ram_usage_exceeded"</span>,</span><br><span class="line">    <span class="string">"what"</span>: <span class="string">"Account using more than allotted RAM usage"</span>,</span><br><span class="line">    <span class="string">"details"</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">"message"</span>: <span class="string">"account hackdappcom1 has insufficient ram; needs 26318 bytes has 5471 bytes"</span>,</span><br><span class="line">        <span class="string">"file"</span>: <span class="string">"resource_limits.cpp"</span>,</span><br><span class="line">        <span class="string">"line_number"</span>: 213,</span><br><span class="line">        <span class="string">"method"</span>: <span class="string">"verify_account_ram_usage"</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="测试网帐号"><a href="#测试网帐号" class="headerlink" title="测试网帐号"></a>测试网帐号</h2><table><thead><tr><th style="text-align:left">帐户名</th><th style="text-align:left">公钥</th><th style="text-align:left">私钥</th></tr></thead><tbody><tr><td style="text-align:left">hackdappcom1</td><td style="text-align:left">EOS6LTWfM5ffbmjUhvwFnrU5QEBrmkzsRo2eXogr2h9oP8DUuzgAi</td><td style="text-align:left">5JxqGao9rzXWBUDnNzALyxaFdmZYXiZ46EzHL4sJkHkryzCFKxu</td></tr><tr><td style="text-align:left">hackdappcom2</td><td style="text-align:left">EOS6qCqbFLuYK5rGK9LDPzcboLqy4phrUxLXLrhLgXxVBpzLzsJke</td><td style="text-align:left">5Jnw2anG8Zzy6MuCNxvwmaX5Hu4B6de1uzuae5QyRrUFtyfL2Wo</td></tr><tr><td style="text-align:left">hackdappcom3</td><td style="text-align:left">EOS57B3rxRBBUiTyZf9iBxsWyQnvEhq2H95wbBbjdzcLbV1gfJ4zy</td><td style="text-align:left">5Ju2NNc24q3jQ2Yc2JcvwWjtGVeAyuWcNsaNVb37u7cmRW56zgc</td></tr><tr><td style="text-align:left">hackdappcom4</td><td style="text-align:left">EOS7i5Diz2uqXSpvutmV4DftBRrL1XASzxsSdWBGrgzngPoXhT2dk</td><td style="text-align:left">5K6nyWMvpfYnQqLhS545dm53exduJgDBLHMYQ6SCNaPmeHjGZdr</td></tr><tr><td style="text-align:left">hackdappcom5</td><td style="text-align:left">EOS6NcaFvvoekuBjhZLsBVywiMcN7VTVmgvAdA5srgTvQMeDmdiAH</td><td style="text-align:left">5JjN9efKokkgZYno2qjbE9C7WCGbVpPvgNArKDvcjbDic2pRGCS</td></tr></tbody></table><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li><a href="https://nadejde.github.io/eos-token-sale/" target="_blank" rel="noopener">https://nadejde.github.io/eos-token-sale/</a></li><li><a href="http://monitor.jungletestnet.io/#home" target="_blank" rel="noopener">http://monitor.jungletestnet.io/#home</a></li><li><a href="https://jungle.eosx.io/tools/ram/buy?symbol=10" target="_blank" rel="noopener">https://jungle.eosx.io/tools/ram/buy?symbol=10</a></li><li><a href="https://github.com/hackdapp/learn_eos" target="_blank" rel="noopener">https://github.com/hackdapp/learn_eos</a></li><li><a href="https://chrome-extension-downloader.com/f944f5bf7bc58292048aa5b9bf29dc48/scatter.crx.crx.crx" target="_blank" rel="noopener">https://chrome-extension-downloader.com/f944f5bf7bc58292048aa5b9bf29dc48/scatter.crx.crx.crx</a></li></ol><hr><p>到此，整个EOS合约开发的流程就算介绍完毕。让我们再总结一下整体操作流程：</p><ol><li>生成两对公私地址，并进行EOS帐户注册</li><li>通过jungle网站进行EOS币的领取，并对其进行余额查询</li><li>安装Scatter插件，导入私钥并绑定新身份</li><li>使用新注册的EOS帐户购买RAMCPUNET发布合约所需要的资源</li><li>创建合约测试示例并编译</li><li>编写发布合约脚本，替换合约帐户后进行合约发布</li><li>编写合约方法调用脚本，调用合约中的hi方法进行日志打印。<br>通过七个步骤我们了解了整个EOS合约开发的最简化操作流程。</li></ol><hr><h2 id="欢迎关注HackDApp博客或公众号-HackHook将持续为你分享IndieMaker成长路径、DAPP技术知识、高效Mac使用技巧、底层思维认知。"><a href="#欢迎关注HackDApp博客或公众号-HackHook将持续为你分享IndieMaker成长路径、DAPP技术知识、高效Mac使用技巧、底层思维认知。" class="headerlink" title="欢迎关注HackDApp博客或公众号, HackHook将持续为你分享IndieMaker成长路径、DAPP技术知识、高效Mac使用技巧、底层思维认知。"></a><strong>欢迎关注HackDApp博客或公众号</strong>, HackHook将持续为你分享IndieMaker成长路径、DAPP技术知识、高效Mac使用技巧、底层思维认知。</h2><p>我的博客:     <a href="https://www.hackdapp.com/">https://www.hackdapp.com/</a><br>我的github:   <a href="https://github.com/hackdapp" target="_blank" rel="noopener">https://github.com/hackdapp</a><br>我的哔哩哔哩:   <a href="https://space.bilibili.com/17360859" target="_blank" rel="noopener">https://space.bilibili.com/17360859</a><br>我的微信公众号: hackdapp<br><img src="http://cdn.hackdapp.com/2019-04-03-mysign.jpg" alt=""></p><h2 id="IndieMakers-https-www-indiemakers-cn"><a href="#IndieMakers-https-www-indiemakers-cn" class="headerlink" title="IndieMakers:  https://www.indiemakers.cn"></a>IndieMakers:  <a href="https://www.indiemakers.cn" target="_blank" rel="noopener">https://www.indiemakers.cn</a></h2><p>联系邮箱：<a href="mailto:55269778@qq.com" target="_blank" rel="noopener">55269778@qq.com</a></p>]]></content>
    
    <summary type="html">
    
      本教程主要面向初阶开发人员，目的在于带领大家以最简单的示例合约，通过简单但不失完整的流程，体验整个合约的编译、发布与调用过程，从而让大家从直观角度有个清晰的概念认识。
    
    </summary>
    
      <category term="EOS完全开发指南" scheme="https://www.hackdapp.com/categories/EOS%E5%AE%8C%E5%85%A8%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97/"/>
    
    
      <category term="eoscontract" scheme="https://www.hackdapp.com/tags/eoscontract/"/>
    
      <category term="eos dev" scheme="https://www.hackdapp.com/tags/eos-dev/"/>
    
  </entry>
  
  <entry>
    <title>学习周报-13W: 制作自己的产品以及初阶运营</title>
    <link href="https://www.hackdapp.com/archives/weekly13.html"/>
    <id>https://www.hackdapp.com/archives/weekly13.html</id>
    <published>2019-03-30T16:00:00.000Z</published>
    <updated>2019-04-11T09:42:19.662Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>应用型人才与技术人才的选择。那么我可能更适合应用型，以解决问题来入口出发。但这也不意味着我放弃对技术的深层次研究。</p></blockquote><hr><ul><li>plasma-cash/plasma_cash/root_chain at master · omisego/plasma-cash<br><a href="https://github.com/omisego/plasma-cash/tree/master/plasma_cash/root_chain" target="_blank" rel="noopener">https://github.com/omisego/plasma-cash/tree/master/plasma_cash/root_chain</a></li><li>OpenZeppelin ERC721源码分析<br><a href="https://yuanxuxu.com/2018/06/28/openzeppelin-erc721-code-analysis/" target="_blank" rel="noopener">https://yuanxuxu.com/2018/06/28/openzeppelin-erc721-code-analysis/</a></li><li>Plasma Cash Simple Spec<br><a href="https://karl.tech/plasma-cash-simple-spec/" target="_blank" rel="noopener">https://karl.tech/plasma-cash-simple-spec/</a></li><li>Loom架构图<br><a href="https://loomx.io/developers/docs/en/arch.html" target="_blank" rel="noopener">https://loomx.io/developers/docs/en/arch.html</a></li><li>遗憾的是，在 Plasma Cash 上发送任意小额的代币会困难得多（Plasma Debit 或状态通道可以解决这一问题，详情见延伸阅读） 。用户通过调用押金函数来指定押金金额。虽然通过 Plasma Cash 发送 ERC721 代币比较好，但是 Plasma MVP 的 UTXO 模型可以更好地处理任意金额的代币交易。<br><a href="http://m.qukuaiwang.com.cn/news/11548.html" target="_blank" rel="noopener">http://m.qukuaiwang.com.cn/news/11548.html</a></li><li>ERC-721<br>erc721.org</li><li>openzeppelin-solidity/ERC721.sol at master · OpenZeppelin/openzeppelin-solidity<br><a href="https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/contracts/token/ERC721/ERC721.sol" target="_blank" rel="noopener">https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/contracts/token/ERC721/ERC721.sol</a></li><li><p><a href="https://github.com/loomnetwork/plasma-erc721" target="_blank" rel="noopener">https://github.com/loomnetwork/plasma-erc721</a></p></li><li><p>Plasma XT  是Plasma Cash的改进版，主要是在安全方面做了改进。它提出了一个Plasma Cash可能的潜在双花问题的解决方案。 more detail： <a href="https://ethresear.ch/t/plasma-xt-plasma-cash-with-much-less-per-user-data-checking/1926" target="_blank" rel="noopener">https://ethresear.ch/t/plasma-xt-plasma-cash-with-much-less-per-user-data-checking/1926</a></p></li><li><p>OmiseGo是Plasma的第一个实现应用。因为在OMG想要在支付领域取得建树，必须具有强大的处理海量交易的能力。区块链上能支持全球范围内的大量的去中心化金融应用。</p></li><li><a href="https://ethfans.org/topics/1938" target="_blank" rel="noopener">重磅 | 美图技术团队发布开源 ethereum dpos 实现 » 论坛 » EthFans | 以太坊爱好者</a></li></ul>]]></content>
    
    <summary type="html">
    
      本周最大的收获就是：如何按照plasma-mvp模型开发侧链，其中可以借鉴的是Loom及OmiseGo的技术方案。HackDApp愿与你分享！
    
    </summary>
    
      <category term="学习周报(2019)" scheme="https://www.hackdapp.com/categories/%E5%AD%A6%E4%B9%A0%E5%91%A8%E6%8A%A5-2019/"/>
    
    
      <category term="学习周报" scheme="https://www.hackdapp.com/tags/%E5%AD%A6%E4%B9%A0%E5%91%A8%E6%8A%A5/"/>
    
      <category term="plasma" scheme="https://www.hackdapp.com/tags/plasma/"/>
    
      <category term="Loom" scheme="https://www.hackdapp.com/tags/Loom/"/>
    
  </entry>
  
  <entry>
    <title>学习周报-12W: 持续的精力投入并以文字记录成长</title>
    <link href="https://www.hackdapp.com/archives/weekly12.html"/>
    <id>https://www.hackdapp.com/archives/weekly12.html</id>
    <published>2019-03-24T13:07:52.000Z</published>
    <updated>2019-04-04T23:37:40.829Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>你的目标是什么？给自己一个deadline？</p></blockquote><p><strong>说给自己听的</strong></p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">有时候感觉和自己对话<span class="comment">(不是自主自语啊，其实就是写字的过程，将自己的想法写成文字)</span>的状态真的很棒，</span><br><span class="line">在写的过程慢慢能够唤醒心中的另一个声音，通过这种方式要可以让自己心放松下来，降低心中的焦虑，取而代之的是具体的行事方式。</span><br><span class="line">比如：今天上午的状态就不是太好，自己的调解方式就是好好洗把脸、清醒清醒。想想内心愉悦的事。</span><br><span class="line">用成就的事情来消除头脑的焦虑。要明白焦虑不是一种对抗状态，不是解决方式。要直面问题，而非情绪，不由得又想起黄执中老师对于情绪管理的一些理解。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">对自己最大的动力便是，通过文字记录自己的成长。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">要给自己一个期限，不可能一直按现有薪资做某一项事情，你当初的目的就是跨界成长。如果由于自己的惰性而放松的化，那还不如回到当初的状态，最起码薪资要比现在的高出不少。不正视自己的努力与蜕变，那就是对自己的不尊重。</span><br></pre></td></tr></table></figure><hr><h2 id="见"><a href="#见" class="headerlink" title="见"></a>见</h2><h3 id="2019-03-18"><a href="#2019-03-18" class="headerlink" title="2019-03-18"></a>2019-03-18</h3><ol><li>雇佣是存量思维，投资自己是增量思维<br> 这个是在spenser文章看到的一句话。看待事物不能只看于其表面所带来的价址，而应该往其未来价值或更深层次的价值。比如：是否在课程或某项活动存在一些高质量潜在的用户。</li><li>Achieve3000<br> 偶尔看到一个关于Lexile值，即蓝思值的测试了解到的。也搜到了一些根据蓝思值推荐书籍的网站</li><li><a href="https://www.lyric.im/maker-vs-manager" target="_blank" rel="noopener">译：创造者 vs 管理者，日程规划能成就了你的工作，也可能毁掉你的工作 - GitPress.io</a><br> 这篇文章之所以看到，是因为作者设计了一款关于微信公众号排版工具，从他所关联的网站所了解到的。</li><li><a href="https://www.lyric.im/how-to-improve-english-reading-level-from-870L-to-1300L" target="_blank" rel="noopener">我如何在两个月内把英语阅读水平从六年级提高大学 - GitPress.io</a></li><li>ReadingPro<br> <a href="http://www.readingpro.cn/，这个网站可以进行蓝思值的测试，不过需要支付50元" target="_blank" rel="noopener">http://www.readingpro.cn/，这个网站可以进行蓝思值的测试，不过需要支付50元</a></li><li><a href="http://www.360doc.com/content/18/1127/08/57517105_797492881.shtml" target="_blank" rel="noopener">Achieve3000产品介绍和操作演示</a></li><li><a href="http://www.theprincetonschool.com/lexile-measure#achieve3000" target="_blank" rel="noopener">The Princeton School</a><br> <img src="http://cdn.hackdapp.com/2019-03-18-132706.png" alt=""><br> <a href="http://www.theprincetonschool.com/lexile-measure#achieve3000" target="_blank" rel="noopener">http://www.theprincetonschool.com/lexile-measure#achieve3000</a></li></ol><h2 id="感"><a href="#感" class="headerlink" title="感"></a>感</h2><h3 id="2019-03-18-1"><a href="#2019-03-18-1" class="headerlink" title="2019-03-18"></a>2019-03-18</h3><p>做事情不够专注与投注。 不知道自己在拖什么呢。最直观的感受就是越拖内心压力其实越大。</p><h2 id="思"><a href="#思" class="headerlink" title="思"></a>思</h2><h3 id="2019-03-18-如何能写出一篇让用户特别满意的教程文档"><a href="#2019-03-18-如何能写出一篇让用户特别满意的教程文档" class="headerlink" title="2019-03-18 如何能写出一篇让用户特别满意的教程文档"></a>2019-03-18 如何能写出一篇让用户特别满意的教程文档</h3><p>思考：授之于鱼还是渔<br>思考：用户最喜欢的技术教程是什么样子的。教程结构清晰， 一眼知道需要分几步操作。既要讲的简单，也要讲的深入。讲的简单，其实就是按用户的层次能够提供相应可理解的示例。举例子确实是一个好的方式。最好是使用商业真实场景，demo形式的可能不具代表性。</p><p>就比如写EOS合约文档，就想成把合约里所有的知识都讲出来。但这样写出来的文档，虽然够全，但用户可能因为篇幅太长，而选择性不看。又或者文章内容太长，结构层次反而会有所影响。所以我自己想过之后，是否可以先写一个大纲的形式。然后再从不小章节进行拆分，进行中高阶不同层次的文章讲解来深入理解其技术。<br>EOS智能合约讲解</p><ol><li>简单示例合约，虽然简单但五脏俱全。</li><li>分拆：合约结构设计：字典文件、工具文件、配置文件、接口文件、接口实现。</li><li>分拆：知识点：ABI</li><li>分拆：知识点：数据结构定义。数据类型有哪些，如何进行选择，比如资金字段</li><li>分拆：知识点：如何实现单例存储</li><li>分拆：知识点：multi_index,如何定义二级索引， 索引的多种遍历方式</li><li>分拆: ……</li></ol><h2 id="行"><a href="#行" class="headerlink" title="行"></a>行</h2><h3 id="2019-03-18-2"><a href="#2019-03-18-2" class="headerlink" title="2019-03-18"></a>2019-03-18</h3><p>通过本周所吸收的一些新的信息，觉得可以做且持续可以做的事：</p><ul><li>英语学习<br>增强英语阅读，可以试着通过翻译文章来提高。</li><li>看书<br>不要觉得在客厅看会电视没啥，没啥没啥一二小时过去了。这一天也就过去了。</li><li>持续的技术投入</li></ul><p>需要对时间时刻保持感知， 一分钟、一小时。定好时间规划，该做啥就做啥，在规划中应对风险。</p><hr><p>与其周末花一段时间来总结本周心得，何不每天写一点，这样还可以总结所需消耗的时间。用这部分时间来直接回顾一周文字。</p>]]></content>
    
    <summary type="html">
    
      本周最大的收获就是：运用增量思维的方式去考问题。另外，持续的精力投注，时刻让自己从内心感受到一些成长的感觉。时刻将自己那时那刻的最棒的感觉记录下来，形成文字，当自己不爽的时候，翻出来看看。HackDApp愿与你分享！
    
    </summary>
    
      <category term="学习周报(2019)" scheme="https://www.hackdapp.com/categories/%E5%AD%A6%E4%B9%A0%E5%91%A8%E6%8A%A5-2019/"/>
    
    
      <category term="学习周报" scheme="https://www.hackdapp.com/tags/%E5%AD%A6%E4%B9%A0%E5%91%A8%E6%8A%A5/"/>
    
  </entry>
  
  <entry>
    <title>学习周报-11W: OKR模板分享</title>
    <link href="https://www.hackdapp.com/archives/weekly11.html"/>
    <id>https://www.hackdapp.com/archives/weekly11.html</id>
    <published>2019-03-16T16:00:00.000Z</published>
    <updated>2019-04-04T23:37:37.283Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>学会正视问题本身，逃避不是解决问题的办法。</p></blockquote><h2 id="见"><a href="#见" class="headerlink" title="见"></a>见</h2><ol><li>OKR模板分享<br><img src="http://cdn.hackdapp.com/2019-04-01-233036.jpg" alt=""></li><li>《爱的五样礼物》，它包括：礼物、精心的时光（陪伴）、身体的接触（拥抱）、赞美、服务。</li><li><p><a href="https://12factor.net/zh_cn/" target="_blank" rel="noopener">The Twelve-Factor App （简体中文）</a><br>如今，软件通常会作为一种服务来交付，它们被称为网络应用程序，或软件即服务（SaaS）。12-Factor 为构建如下的 SaaS 应用提供了方法论：</p><p>使用标准化流程自动配置，从而使新的开发者花费最少的学习成本加入这个项目。<br>和操作系统之间尽可能的划清界限，在各个系统中提供最大的可移植性。<br>适合部署在现代的云计算平台，从而在服务器和系统管理方面节省资源。<br>将开发环境和生产环境的差异降至最低，并使用持续交付实施敏捷开发。<br>可以在工具、架构和开发流程不发生明显变化的前提下实现扩展。<br>这套理论适用于任意语言和后端服务（数据库、消息队列、缓存等）开发的应用程序。<br><img src="http://cdn.hackdapp.com/2019-04-01-233347.jpg" alt=""></p></li></ol><h2 id="感"><a href="#感" class="headerlink" title="感"></a>感</h2><p>有时候，人会恐惧某一件事情，而选择逃避。其实这失去了一次锻炼自我的机会，正视问题才能解决内心的恐惧。成长嘛，经历一次就会有第二次，慢慢就不怕了，反倒是越逃避越害怕。</p><p>给自己一次直面问题的选择吧。</p><h2 id="思"><a href="#思" class="headerlink" title="思"></a>思</h2><p>如何控制自己的情绪？<br>情绪真是个魔鬼，感觉心里面住着两个自己。正面、反面、躯体三者如何好好配合。其实要在这三者之前达到一种平衡，任何一个能力太弱或太强都会让自己翻车。</p><h2 id="行"><a href="#行" class="headerlink" title="行"></a>行</h2><p>将每日重要不紧急的事情拆解成目标放在OKR模板中， 并在每日结束时总结完成情况。尤其是在产品功能开发中，可以让自己在持续投入时间精力。</p>]]></content>
    
    <summary type="html">
    
      本周最大的收获就是：学会持续交付能力，正所谓一口吃不成一个胖子。学会正视问题本身，逃避不是解决问题的办法。 另外，分享给大家一个OKR工作模板。 HackDApp愿与你分享！
    
    </summary>
    
      <category term="学习周报(2019)" scheme="https://www.hackdapp.com/categories/%E5%AD%A6%E4%B9%A0%E5%91%A8%E6%8A%A5-2019/"/>
    
    
      <category term="学习周报" scheme="https://www.hackdapp.com/tags/%E5%AD%A6%E4%B9%A0%E5%91%A8%E6%8A%A5/"/>
    
  </entry>
  
  <entry>
    <title>巧用HistoryApiAction实现对链数据的存储与查询</title>
    <link href="https://www.hackdapp.com/archives/eosdev_datastorage_historyaction.html"/>
    <id>https://www.hackdapp.com/archives/eosdev_datastorage_historyaction.html</id>
    <published>2019-03-13T08:36:13.000Z</published>
    <updated>2019-03-14T06:40:50.084Z</updated>
    
    <content type="html"><![CDATA[<p>在开发EOS DApp智能合约时，我们都知道可以使用<code>multi_index</code>来对合约数据的存储与查询，但合约的存储是需要消耗一定的资源的，而且随着用户的增长往往会导业务数据会越来越大，从而导致合约需要更多的资源来支撑其数据。</p><p>有时我们可以通过业务设计，让业务数据得到即时清理及资源释放。但大多数情况下，业务数据是不允许清理的，那么针对这种情况是否有其他办法来降低对合约存储资源的消耗呢？</p><p>那么，今天分享的方案就是：借用EOS链提供的<code>history_api_action</code>插件服务、内部合约Action调用来完成对业务数据的存储与查询。</p><p>举个🌰️：<br>在去中心化交易所中，往往搓合成功会产生大量的成交订单，那保存在合约数据库中肯定是不合适的，所以可以在搓合方法中通过调用内部日志方法的形式，通过交易日志来将订单数据写入区块中；然后通过EOS节点提供的<a href="https://developers.eos.io/eosio-nodeos/v1.4.0/reference#get_actions-1" target="_blank" rel="noopener">查询历史action接口</a>，查询合约日志数据并增量同步到中心化数据库。</p><p>下面，我们将通过具体的代码示例来帮助大家理解整个过程：</p><hr><p><strong>首先</strong>，我们新创建一个合约(dexchange.hpp/dexchange.cpp)；<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">//dexchange.hpp</span><br><span class="line"><span class="comment">#include &lt;eosiolib/eosio.hpp&gt;</span></span><br><span class="line"><span class="comment">#include &lt;eosiolib/print.hpp&gt;</span></span><br><span class="line"></span><br><span class="line">using namespace eosio;</span><br><span class="line"></span><br><span class="line">CONTRACT dexchange : public contract &#123;</span><br><span class="line">  public:</span><br><span class="line">    using contract::contract;</span><br><span class="line">    dexchange(eosio::name receiver, eosio::name code, datastream&lt;const char*&gt; ds):contract(receiver, code, ds) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    [[eosio::action]]</span><br><span class="line">    void executetrade(uint64_t pair_id, uint64_t sell_order_id, uint64_t buy_order_id);</span><br><span class="line"></span><br><span class="line">    [[eosio::action]]</span><br><span class="line">    void <span class="built_in">log</span>(uint64_t deal_price, uint64_t quantity, uint64_t sell_order_id, uint64_t buy_order_id);</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">EOSIO_DISPATCH(dexchange, (executetrade)(<span class="built_in">log</span>))</span><br><span class="line"></span><br><span class="line">//https://gist.github.com/2b68242019242bdd12f174208e39e7d2</span><br></pre></td></tr></table></figure></p><p><strong>然后</strong>，定义并实现两个方法：executetrade、log。 <code>executetrade</code>合约方法负责搓合业务，当搓合业务处理完之后调用<code>log</code>方法，通过交易信息将参数调用数据写入区块中；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">//filename: dexchange.cpp</span><br><span class="line"></span><br><span class="line"><span class="comment">#include "dexchange.hpp"</span></span><br><span class="line"></span><br><span class="line">void dexchange::executetrade(uint64_t pair_id, uint64_t sell_order_id, uint64_t buy_order_id)&#123;</span><br><span class="line">  uint64_t deal_price = 1200;</span><br><span class="line">  uint64_t quantity = 10000;</span><br><span class="line"></span><br><span class="line">  action(</span><br><span class="line">      permission_level&#123; _self, <span class="string">"active"</span>_n &#125;,</span><br><span class="line">      _self, <span class="string">"log"</span>_n,</span><br><span class="line">      std::make_tuple(deal_price, pair_id, sell_order_id, buy_order_id)</span><br><span class="line">  ).send();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void dexchange::<span class="built_in">log</span>(uint64_t deal_price, uint64_t quantity, uint64_t sell_order_id, uint64_t buy_order_id)&#123;</span><br><span class="line">  require_auth( _self );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//https://gist.github.com/ea6ec431a57faee3a2823cfeee406efd</span><br></pre></td></tr></table></figure><p>从以上示例可以看出，合约log日志方法其实并不需要做任何业务逻辑处理。只需要间接被调用，便可将我们需要的业务数据通过交易的形式记录在区块中，而不会浪费我们的合约存储空间，也不需要担心资源释放的问题。</p><p><strong>下一步</strong>、发布智能合约，并调用一次<code>executetrade</code>合约方法</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//发布合约至hackdappexch合约帐户</span><br><span class="line">&gt; cleos <span class="built_in">set</span> contract hackdappexch contracts/ -p  hackdappexch@active</span><br><span class="line"></span><br><span class="line">//执行合约方法</span><br><span class="line">&gt; cleos push action hackdappexch executetrade <span class="string">'[1,2,3]'</span> -p hackdappexch@active</span><br></pre></td></tr></table></figure><p><strong>最后</strong>，通过EOS链节点提供的<a href="https://developers.eos.io/eosio-nodeos/v1.4.0/reference#get_actions-1" target="_blank" rel="noopener">RPC服务</a>，进行历史action数据查询，通过数据过滤找到我们的日志方法及参数数据。</p><p>在确保之前的操作都成功之后，我们使用curl命令查询其对应服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">curl --request POST \</span><br><span class="line">  --url https://localhost:8888/v1/<span class="built_in">history</span>/get_actions \</span><br><span class="line">  --header <span class="string">'content-type: application/x-www-form-urlencoded; charset=UTF-8'</span> \</span><br><span class="line">  --data <span class="string">'&#123;"pos":-1,"offset":-10,"account_name":"hackdappexch"&#125;'</span></span><br></pre></td></tr></table></figure><p>通过此接口查询出来的数据不仅仅是<code>log</code>合约方法数据，可能还会存在该合约的其他方法事件，需要根据情况再过滤一次数据。</p><p><img src="http://cdn.hackdapp.com/2019-03-13-080641.jpg" alt=""></p><p><strong>补充说明</strong></p><p>如果你在本地曾经搭建过EOS私链的化，那么或许看到过，EOS启动时是可以配置不同插件。而其中有一个插件<code>history_api_plugin</code>，就是用于监听并存储合约方法的调用信息；另外启动链节点时，是可以按规划自由指定所要监听的合约帐户及方法，如： <code>--filter-on hackdappexch::log</code>, 该参数配置表示只监听hackdappexch合约中的log方法。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">nodeos -e -p eosio -d /mnt/dev/data \</span><br><span class="line">  --config-dir /mnt/dev/config \</span><br><span class="line">  --http-validate-host=<span class="literal">false</span> \</span><br><span class="line">  --plugin eosio::producer_plugin \</span><br><span class="line">  --plugin eosio::chain_api_plugin \</span><br><span class="line">  --plugin eosio::http_plugin \</span><br><span class="line">  --plugin eosio::history_api_plugin \</span><br><span class="line">  --http-server-address=0.0.0.0:8888 \</span><br><span class="line">  --access-control-allow-origin=* \</span><br><span class="line">  --contracts-console \</span><br><span class="line">  --filter-on hackdappexch:<span class="built_in">log</span>: \</span><br><span class="line">  --max-transaction-time=1000 \</span><br><span class="line">  --verbose-http-errors &amp;</span><br></pre></td></tr></table></figure><p>如以上EOS节点启动命令，就展示了启动一个EOS节点的具体参数配置。其中，<code>--filter-on</code>参数便是指定只监听记录<code>hackdappexch</code>合约的<code>log</code>方法调用数据。</p><p>所以，当我们要通过链节点RPC服务查询合约方法历史调用数据时，需要先确认提供RPC服务的节点是否开启了<code>history_api_plugin</code>插件，以及自己所要查询的合约是否在其过滤规则之中。</p><hr><p><strong>小结</strong></p><p>通过本篇文章，我们学会了利用<strong>内部合约方法调用</strong> ➕️ <strong>链节点历史Action查询</strong>的方式实现业务数据的另一种数据存储与查询方案。</p><hr><blockquote><p>在教程中如出现错误🐛或不易理解的知识点，欢迎加我微信指正!<br>Name: zhangliang | WeChat: rushking2009 | Mail: <a href="mailto:zhangliang@cldy.org" target="_blank" rel="noopener">zhangliang@cldy.org</a></p></blockquote><p><img class="nofancybox" src="http://cdn.hackdapp.com/2019-03-11-IMG_1625.JPG-blog" style="display: inline;"><img class="nofancybox" src="http://cdn.hackdapp.com/2019-03-11-IMG_1626.jpg-blog" style="display: inline; "></p><hr><h3 id="changelog"><a href="#changelog" class="headerlink" title="changelog"></a><strong>changelog</strong></h3><p>2019-03-13 <a href="mailto:zhangliang@cldy.org" target="_blank" rel="noopener">zhangliang</a></p><ul><li>初次发稿</li></ul>]]></content>
    
    <summary type="html">
    
      在开发EOS DApp智能合约时，我们都知道可以使用`multi\\_index\_`来对合约数据的存储与查询，但合约的存储是需要消耗一定的资源的，而且随着用户的增长往往会导业务数据会越来越大，从而导致合约需要更多的资源来支撑其数据增长。那么是否有一种更好的方式来降低某些场景的资源消耗呢？那么，今天将为你分享一种数据存储方案： 借用EOS链提供的`history_api_action\_`插件、`内部合约Action调用`来完成对业务数据的存储与查询。HackDApp愿与你分享！
    
    </summary>
    
      <category term="EOS完全开发指南" scheme="https://www.hackdapp.com/categories/EOS%E5%AE%8C%E5%85%A8%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97/"/>
    
    
      <category term="EOS完全开发指南" scheme="https://www.hackdapp.com/tags/EOS%E5%AE%8C%E5%85%A8%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97/"/>
    
      <category term="合约数据存储" scheme="https://www.hackdapp.com/tags/%E5%90%88%E7%BA%A6%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/"/>
    
      <category term="history action" scheme="https://www.hackdapp.com/tags/history-action/"/>
    
      <category term="inline action" scheme="https://www.hackdapp.com/tags/inline-action/"/>
    
  </entry>
  
  <entry>
    <title>使用EOS.js发布EOS智能合约</title>
    <link href="https://www.hackdapp.com/archives/eosdev_deploycontract_eosjs.html"/>
    <id>https://www.hackdapp.com/archives/eosdev_deploycontract_eosjs.html</id>
    <published>2019-03-12T10:59:46.000Z</published>
    <updated>2019-03-14T01:23:36.811Z</updated>
    
    <content type="html"><![CDATA[<p>在之前的EOS合约开发文章，你可能学会了如何通过EOS系统命令<strong>cleos set contract</strong>的方式进行智能合约的发布与升级。</p><p>但在开发过程中，可能有的同学持续在命令容器与开发IDE间频繁切换，对开发效率有一定程序的影响，那是否有一种更好的方式帮助我们在一个窗口里快速发布合约呢？</p><p>那么本文将带你了解<strong>如何通过EOS.js进行智能合约的发布</strong>。</p><p><img src="http://cdn.hackdapp.com/2019-03-12-083806.jpg" alt=""><br>如上图所示，在进行合约发布时，需要用到eos系统合约中的两个方法：setcode、setabi。而这两个方法分别会用到智能合约编译后的两个文件： *.wasm、*.abi。</p><p><strong>注意</strong> ： 本文示例中使用的eosjs的版本为<code>16.0.9</code>。</p><p><strong>首先</strong>，需要初始化EOS-SDK实例。 事先准备好初始化SDK所必需的参数：</p><ul><li>chainid<br>  所要发布的目标EOS链chainid. 例如：正式chainid: aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906; jungle测试网chainid: e70aaab8997e1dfce58fbfac80cbbb8fecec7b99cf982a9444273cbc64c41473等等</li><li>httpEndpoint<br>  EOS链环境http接口地址。 例如: <a href="http://localhost:8888" target="_blank" rel="noopener">http://localhost:8888</a></li><li>keyProvider<br>  合约帐户私钥，主要用于交易签名。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">//config.js</span><br><span class="line">const Eos = require(<span class="string">'eosjs'</span>)</span><br><span class="line"></span><br><span class="line">const eos = Eos(&#123;</span><br><span class="line">    chainId: <span class="string">"cf057bbfb72640471fd910bcb67639c22df9f92470936cddc1ade0e2f2e7dc4f"</span>,</span><br><span class="line">    httpEndpoint: <span class="string">"http://localhost:8888"</span>,</span><br><span class="line">    keyProvider: <span class="string">"5K7mtrinTFrVTduSxizUc5hjXJEtTjVTsqSHeBHes1Viep86FP5"</span>,</span><br><span class="line">    broadcast: <span class="literal">true</span>,</span><br><span class="line">    sign: <span class="literal">true</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">    eos,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//https://gist.github.com/hackdapp/2522411b98b1acdadc0d842f712ca6e0</span><br></pre></td></tr></table></figure><p><strong>下一步</strong>，需要代码实现对合约文件夹中的.wasm及.abi文件的读取；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> getDeployableFilesFromDir(dir) &#123;</span><br><span class="line">    const dirCont = fs.readdirSync(dir)</span><br><span class="line">    const wasmFileName = dirCont.find(filePath =&gt; filePath.match(/.*\.(wasm)$/gi))</span><br><span class="line">    const abiFileName = dirCont.find(filePath =&gt; filePath.match(/.*\.(abi)$/gi))</span><br><span class="line">    <span class="keyword">if</span> (!wasmFileName) throw new Error(`Cannot find a <span class="string">".wasm file"</span> <span class="keyword">in</span> <span class="variable">$&#123;dir&#125;</span>`)</span><br><span class="line">    <span class="keyword">if</span> (!abiFileName) throw new Error(`Cannot find an <span class="string">".abi file"</span> <span class="keyword">in</span> <span class="variable">$&#123;dir&#125;</span>`)</span><br><span class="line">    <span class="built_in">return</span> &#123;</span><br><span class="line">        wasmPath: path.join(dir, wasmFileName),</span><br><span class="line">        abiPath: path.join(dir, abiFileName),</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//https://gist.github.com/69b29103e5cc114f4478390076d8ad39</span><br></pre></td></tr></table></figure><p><strong>然后</strong>，通过调用eos实例，分别执行系统合约的setcode/setabi方法，从而达到智能合约的发布；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> deployContract(&#123; account, contractDir &#125;) &#123;</span><br><span class="line">  const &#123; wasmPath, abiPath &#125; = getDeployableFilesFromDir(contractDir)</span><br><span class="line"></span><br><span class="line">  const wasm = fs.readFileSync(wasmPath)</span><br><span class="line">  const abi = fs.readFileSync(abiPath)</span><br><span class="line"></span><br><span class="line">  const codePromise = eos.setcode(account, 0, 0, wasm)</span><br><span class="line">  const abiPromise = eos.setabi(account, JSON.parse(abi))</span><br><span class="line">  <span class="built_in">return</span> Promise.all([codePromise, abiPromise])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//https://gist.github.com/69b29103e5cc114f4478390076d8ad39</span><br></pre></td></tr></table></figure><p><strong>最后</strong>，调用deployContract方法，测试合约发布功能。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">deployContract(&#123; account: <span class="string">"eosio.token"</span>, contractDir: <span class="string">"./contract"</span> &#125;).<span class="keyword">then</span>((result) =&gt; &#123;</span><br><span class="line">    console.log(`Deployment successful`, JSON.stringify(result, null , 4))</span><br><span class="line">&#125;)</span><br><span class="line">.catch(err =&gt; &#123;</span><br><span class="line">    console.error(`Deployment failed`, err)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">//https://gist.github.com/69b29103e5cc114f4478390076d8ad39</span><br></pre></td></tr></table></figure><hr><p><strong>小结</strong></p><p>通过本文我们学习了如何通过eos实例的setcode/setabi方法将合约编译文件快速发布到指定链环境。</p><p>另外，如果为了提高发布合约效率，我们还可以在package.json中定义发布合约的运行脚本，并配合IDE工具中的快捷键，便可达到开发效率的进一步提升。</p><hr><blockquote><p>在教程中如出现错误🐛或不易理解的知识点，欢迎加我微信指正!<br>Name: zhangliang | WeChat: rushking2009 | Mail: <a href="mailto:zhangliang@cldy.org" target="_blank" rel="noopener">zhangliang@cldy.org</a></p></blockquote><p><img class="nofancybox" src="http://cdn.hackdapp.com/2019-03-11-IMG_1625.JPG-blog" style="display: inline;"><img class="nofancybox" src="http://cdn.hackdapp.com/2019-03-11-IMG_1626.jpg-blog" style="display: inline; "></p><p>注： 有想了解<strong>愿码全思维IT工程师加速器</strong>的朋友，可以扫码加群咨询。</p><hr><h3 id="changelog"><a href="#changelog" class="headerlink" title="changelog"></a><strong>changelog</strong></h3><p>2019-03-12 <a href="mailto:zhangliang@cldy.org" target="_blank" rel="noopener">zhangliang</a></p><ul><li>初次发稿</li></ul>]]></content>
    
    <summary type="html">
    
      之前我们曾经介绍过如何使用EOS的系统命令(cleos set contract)发布智能合约，那么今天将分享另外一种方式：使用eosjs-sdk发布合约。在此基础上，可以通过配置package.json脚本以及IDE快捷链，可以快速提升DApp开发效率。HackDApp愿与你分享！
    
    </summary>
    
      <category term="EOS完全开发指南" scheme="https://www.hackdapp.com/categories/EOS%E5%AE%8C%E5%85%A8%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97/"/>
    
    
      <category term="EOS完全开发指南" scheme="https://www.hackdapp.com/tags/EOS%E5%AE%8C%E5%85%A8%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97/"/>
    
      <category term="EOS合约开发教程" scheme="https://www.hackdapp.com/tags/EOS%E5%90%88%E7%BA%A6%E5%BC%80%E5%8F%91%E6%95%99%E7%A8%8B/"/>
    
      <category term="deploy contract" scheme="https://www.hackdapp.com/tags/deploy-contract/"/>
    
  </entry>
  
  <entry>
    <title>学习周报-10W: 尝试使用卡片写作的形式进行分享</title>
    <link href="https://www.hackdapp.com/archives/weekly10.html"/>
    <id>https://www.hackdapp.com/archives/weekly10.html</id>
    <published>2019-03-09T16:00:00.000Z</published>
    <updated>2019-04-04T23:37:33.872Z</updated>
    
    <content type="html"><![CDATA[<h2 id="见"><a href="#见" class="headerlink" title="见"></a>见</h2><ol><li><a href="http://www.guxiaobei.com/seo" target="_blank" rel="noopener">SEO 顾小北的B2C博客</a></li></ol><h2 id="感"><a href="#感" class="headerlink" title="感"></a>感</h2><p>你的核心竞争力就在你平时八小时之外的能力培养。<br>安逸使人堕落，只要脱理危机。居安思危需入人心。</p><h2 id="思"><a href="#思" class="headerlink" title="思"></a>思</h2><p>如何能够自己的知识价值最大化？做一款产品，能帮助别人的产品，<br>成功或价值可以反推自己。</p><h2 id="行"><a href="#行" class="headerlink" title="行"></a>行</h2><p>尝试构建一个专题网站：针对IndieMaker提供工具或教程资源。持续更新才是你的价值点。</p>]]></content>
    
    <summary type="html">
    
      本周最大的收获就是：尝试收集身边人的需求，考虑是否可以站在产品角度来思考如何解决他们的问题？HackDApp愿与你分享！
    
    </summary>
    
      <category term="学习周报(2019)" scheme="https://www.hackdapp.com/categories/%E5%AD%A6%E4%B9%A0%E5%91%A8%E6%8A%A5-2019/"/>
    
    
      <category term="学习周报" scheme="https://www.hackdapp.com/tags/%E5%AD%A6%E4%B9%A0%E5%91%A8%E6%8A%A5/"/>
    
  </entry>
  
  <entry>
    <title>剖析EOS合约编译ABI文件</title>
    <link href="https://www.hackdapp.com/archives/eosdev_contract_abi.html"/>
    <id>https://www.hackdapp.com/archives/eosdev_contract_abi.html</id>
    <published>2019-03-07T11:33:14.000Z</published>
    <updated>2019-03-14T01:23:31.513Z</updated>
    
    <content type="html"><![CDATA[<p>相信不少开发者朋友在进行EOS合约开发时，都看到发布智能合约时的ABI文件。那ABI文件到底是什么东西？在EOS公链环境中到底发挥怎么样的作用呢以及如何解读ABI文件内容呢？</p><p>那么本章节将带你了解ABI文件与智能合约间的关系以及了解并学会ABI文件的编写。</p><p><strong>ABI</strong>， 简称(Application Binary Interface), 是一个基于JSON语言的接口描述文档，用于描述EOS合约以及如何对合约方法进行调用。如果大家曾经接触过websocket、avro、hession、thrift等这类技术的化，那么是大体逻辑是相向的。比如websocket所提供的wsdl其实也是对websocket本身对外所提供服务的接口描述。</p><p>在EOS合约，ABI文件是由开发组件eosio.cdt工具包中的eosio-cpp命令执行所生成的文件。但在实际开发时，时常会碰到一些情况无法生成ABI文件。因为在合约开发，我们往往会根据业务自定义一些数据结构，或者使用一些第三方方法，而eosio.cdt本身对所有特隆并不是支持的很完善，所以时常导致编译失败，这时就需要我们理解ABI是如何定义智能合约的，以便于我们定制化修改自己的合约描述。</p><p>ABI文件结构是由什么组成的呢？让我们先看一个示例</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   <span class="string">"version"</span>: <span class="string">"eosio::abi/1.0"</span>,</span><br><span class="line">   <span class="string">"types"</span>: [],</span><br><span class="line">   <span class="string">"structs"</span>: [],</span><br><span class="line">   <span class="string">"actions"</span>: [],</span><br><span class="line">   <span class="string">"tables"</span>: [],</span><br><span class="line">   <span class="string">"ricardian_clauses"</span>: [],</span><br><span class="line">   <span class="string">"abi_extensions"</span>: [],</span><br><span class="line">   <span class="string">"___comment"</span> : <span class="string">""</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面json示例展示了一个标准智能合约所应具备的完整属性定义。</p><p><strong>数据类型(type)</strong><br>在项目开发过程，有时为了便于代码的理解，我们会将一些通用数据类型或数据结构进行别名定义，用一个在业务场景中更加贴合业务的名称代替。在<code>types</code>数组中便是对这种情况的定义描述。</p><p>比如：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   <span class="string">"new_type_name"</span>: <span class="string">"age"</span>,</span><br><span class="line">   <span class="string">"type"</span>: <span class="string">"int"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">或者</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">   <span class="string">"new_type_name"</span>: <span class="string">"name"</span>,</span><br><span class="line">   <span class="string">"type"</span>: <span class="string">"string"</span> //此处user为自定义数据结构</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>对于合约内嵌类型，是不会在此展示的。诸如： uint64_t、name、asset、symbol等。下图展示了EOS合约所支持的所有内置数据类型<br><img src="http://image.chaindesk.cn/2019-03-07-095044.jpg" alt=""></p><hr><p><strong>结构体(struct)</strong><br>在业务处理逻辑中，为了方便数据的传输与调用，往往我们会对针对业务数据进行建模并以结构体的形式展现。同样，它也需要在ABI文件中进行描述。</p><p>比如: eosio.token合约中的account结构体定义</p><ul><li><p>ABI文件定义</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"name"</span>: <span class="string">"account"</span>,</span><br><span class="line">    <span class="string">"base"</span>: <span class="string">""</span>,</span><br><span class="line">    <span class="string">"fields"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">"name"</span>: <span class="string">"balance"</span>,</span><br><span class="line">            <span class="string">"type"</span>: <span class="string">"asset"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>eosio.token.hpp实现</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">struct account &#123;</span><br><span class="line">asset    balance;</span><br><span class="line"></span><br><span class="line">uint64_t primary_key()const &#123;</span><br><span class="line"><span class="built_in">return</span> balance.symbol.code().raw();</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><p>另外，需要注意的就是除了以上这种结构体定义，其实还存在一种隐性结构体，即：合约方法参数<br>示例：</p><ul><li><p>eosio.token.hpp中transfer方法定义</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">void transfer( name    from,</span><br><span class="line">                        name    to,</span><br><span class="line">                        asset   quantity,</span><br><span class="line">                        string  memo );</span><br></pre></td></tr></table></figure></li><li><p>eosin.token合约中transfer方法在ABI文件中定义</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="string">"name"</span>: <span class="string">"transfer"</span>,</span><br><span class="line"><span class="string">"base"</span>: <span class="string">""</span>,</span><br><span class="line"><span class="string">"fields"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">"name"</span>: <span class="string">"from"</span>,</span><br><span class="line">        <span class="string">"type"</span>: <span class="string">"name"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">"name"</span>: <span class="string">"to"</span>,</span><br><span class="line">        <span class="string">"type"</span>: <span class="string">"name"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">"name"</span>: <span class="string">"quantity"</span>,</span><br><span class="line">        <span class="string">"type"</span>: <span class="string">"asset"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">"name"</span>: <span class="string">"memo"</span>,</span><br><span class="line">        <span class="string">"type"</span>: <span class="string">"string"</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>可以看出，隐性结构体与前面所定义显性结构体定义是并没有什么不同，只是在智能合约业务逻辑中，我们仅用到显性结构体来存储我们的业务数据进行逻辑判断。</p><hr><p><strong>方法(Action)</strong><br><code>Action</code>数组主要用于描述外部可调用的方法列表以及具体的参数列表。在智能合约中，如果需要对外公开合约方法，往往会在合约头文件中进行如下定义：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[[eosio::action]]</span><br><span class="line">void transfer(name from,name to, asset quantity, string memo);</span><br></pre></td></tr></table></figure></p><p>而ABI的表现形式为：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"name"</span>: <span class="string">"transfer"</span>,</span><br><span class="line">    <span class="string">"type"</span>: <span class="string">"transfer"</span>,</span><br><span class="line">    <span class="string">"ricardian_contract"</span>: <span class="string">""</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>从上述描述可以看出，在方法的类型定义关联了前面的隐性结构体类型。虽然在此处，方法名与隐性结构体类型命名一致，但实际情况并不一定非要相同。</p><hr><p><strong>表定义(Table)</strong><br>关于表的ABI定义，相比其他几种定义要稍复杂一些。具体JSON定义如下<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"name"</span>: <span class="string">""</span>,</span><br><span class="line">  <span class="string">"type"</span>: <span class="string">""</span>,</span><br><span class="line">  <span class="string">"index_type"</span>: <span class="string">""</span>,</span><br><span class="line">  <span class="string">"key_names"</span> : [],</span><br><span class="line">  <span class="string">"key_types"</span> : []</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>JSON中字段说明如下:</p><ul><li>name<br>  合约初始化表时所要使用的名称</li><li>type<br>  表对应的数据结构体。也就是前面所说的显性结构体类型</li><li>index _type<br>  此类型为表主键类型</li><li>key _names<br>  索引字段列表</li><li>key_types<br>  索引字段数据类型列表。数据长度与索引字段列表长度一致。需要说明的是索引字段类型，只支持uint64_t,uint128 _t,uint256 _t,double,long double五种类型<br>示例：eosio.token合约中的accounts表</li><li><p>ABI表定义</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"name"</span>: <span class="string">"accounts"</span>,</span><br><span class="line">    <span class="string">"type"</span>: <span class="string">"account"</span>,</span><br><span class="line">    <span class="string">"index_type"</span>: <span class="string">"i64"</span>,</span><br><span class="line">    <span class="string">"key_names"</span>: [<span class="string">"primary_key"</span>],</span><br><span class="line">    <span class="string">"key_types"</span>: [<span class="string">"uint64"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>表合约代码</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">struct [[eosio::table]] account &#123;</span><br><span class="line">    asset    balance;</span><br><span class="line"></span><br><span class="line">    uint64_t primary_key()const &#123; <span class="built_in">return</span> balance.symbol.code().raw(); &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><p>从表合约代码可以看来，只需要在数据结构体代码中添加eosio-table标签就可以完成对表的定义操作。</p><p>之所以提供多索引的实现，主要还是为了应对业务场景中不同维度的数据查询，而且支持按升序或降序的遍历方式处理业务。</p><hr><p><strong>ricardian条款(ricardian_clauses)</strong><br>该数组主要用于定义一种基于文本的合约宪法。通过其与智能合约的整合，来解决一些无法通过程序来判定的情况。</p><p>示例如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"ricardian_clauses"</span>: [&#123;</span><br><span class="line">      <span class="string">"id"</span>: <span class="string">"Warranty"</span>,</span><br><span class="line">      <span class="string">"body"</span>: <span class="string">"WARRANTY. The invoker of the contract action shall uphold its Obligations under this Contract in a timely and workmanlike manner, using knowledge and recommendations for performing the services which meet generally acceptable standards set forth by EOS.IO Blockchain Block Producers.\n\n"</span></span><br><span class="line">    &#125;,&#123;</span><br><span class="line">      <span class="string">"id"</span>: <span class="string">"Default"</span>,</span><br><span class="line">      <span class="string">"body"</span>: <span class="string">"DEFAULT. The occurrence of any of the following shall constitute a material default under this Contract: \n\n"</span></span><br><span class="line">    &#125;,&#123;</span><br><span class="line">      <span class="string">"id"</span>: <span class="string">"Remedies"</span>,</span><br><span class="line">      <span class="string">"body"</span>: <span class="string">"REMEDIES. In addition to any and all other rights a party may have available according to law, if a party defaults by failing to substantially perform any provision, term or condition of this Contract, the other party may terminate the Contract by providing written notice to the defaulting party. This notice shall describe with sufficient detail the nature of the default. The party receiving such notice shall promptly be removed from being a Block Producer and this Contract shall be automatically terminated. \n  \n"</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br></pre></td></tr></table></figure></p><p>我们可以针对智能合约或者具体的合约方法，附加上对应的文本合约描述。比如针对方法的文本合约定义:</p><ul><li><p>ABI定义</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"actions"</span>: [&#123;</span><br><span class="line">    <span class="string">"name"</span>: <span class="string">"hi"</span>,</span><br><span class="line">    <span class="string">"type"</span>: <span class="string">"hi"</span>,</span><br><span class="line">    <span class="string">"ricardian_contract"</span>: <span class="string">"# CONTRACT FOR hello::hi## ACTION NAME: hi\n### Parameters### Parameters\nInput parameters:Input parameters:\n\n* `user` (string to include in the output)* `user` (string to include in the output)\n\nImplied parameters: Implied parameters: \n\n* `account_name` (name of the party invoking and signing the contract)* `account_name` (name of the party invoking and signing the contract)\n\n### Intent### Intent\nINTENT. The intention of the author and the invoker of this contract is to print output. It shall have no other effect.INTENT. The intention of the author and the invoker of this contract is to print output. It shall have no other effect.\n\n### Term### Term\nTERM. This Contract expires at the conclusion of code execution.TERM. This Contract expires at the conclusion of code execution.\n"</span></span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure></li><li><p>代码及文件定义（hello.hi_rc.md）</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># CONTRACT FOR hello::hi</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## ACTION NAME: hi</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### Parameters</span></span><br><span class="line">Input parameters:</span><br><span class="line"></span><br><span class="line">* `user` (string to include <span class="keyword">in</span> the output)</span><br><span class="line"></span><br><span class="line">Implied parameters:</span><br><span class="line"></span><br><span class="line">* `account_name` (name of the party invoking and signing the contract)</span><br><span class="line"></span><br><span class="line"><span class="comment">### Intent</span></span><br><span class="line">INTENT. The intention of the author and the invoker of this contract is to <span class="built_in">print</span> output. It shall have no other effect.</span><br><span class="line"></span><br><span class="line"><span class="comment">### Term</span></span><br><span class="line">TERM. This Contract expires at the conclusion of code execution.</span><br></pre></td></tr></table></figure></li></ul><hr><p><strong>ABI Extensions</strong><br>该功能将允许用户进行自定义区块扩展， 包括对数据的签名、编码等。不过现在该属性暂未被应用支持。</p><hr><p>到此，相信大家对于整个ABI文件的结构应该有了大体的认识与理解。这样大家可以在研究其他智能合约时，可以首先阅读对方的ABI文件，就可以熟悉对方的整体接口框架。</p><hr><blockquote><p>在教程中如出现错误🐛或不易理解的知识点，欢迎加我微信指正!<br>Name: zhangliang | WeChat: rushking2009 | Mail: <a href="mailto:zhangliang@cldy.org" target="_blank" rel="noopener">zhangliang@cldy.org</a></p></blockquote><hr><p><strong>changelog</strong><br>2019-03-07 <a href="mailto:zhangliang@cldy.org" target="_blank" rel="noopener">zhangliang</a></p><ul><li>初次发稿</li></ul>]]></content>
    
    <summary type="html">
    
      每个EOS合约开发者肯定都知道ABI文件，但却不一定都知道ABI内部属性是什么，具体作用。本文hackdapp将带你一探ABI究竟。HackDApp愿与你分享！
    
    </summary>
    
      <category term="EOS完全开发指南" scheme="https://www.hackdapp.com/categories/EOS%E5%AE%8C%E5%85%A8%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97/"/>
    
    
      <category term="EOS完全开发指南" scheme="https://www.hackdapp.com/tags/EOS%E5%AE%8C%E5%85%A8%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97/"/>
    
      <category term="EOS合约开发教程" scheme="https://www.hackdapp.com/tags/EOS%E5%90%88%E7%BA%A6%E5%BC%80%E5%8F%91%E6%95%99%E7%A8%8B/"/>
    
      <category term="EOS完全开发手册" scheme="https://www.hackdapp.com/tags/EOS%E5%AE%8C%E5%85%A8%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C/"/>
    
      <category term="eos smart abi" scheme="https://www.hackdapp.com/tags/eos-smart-abi/"/>
    
  </entry>
  
  <entry>
    <title>学习周报-09W: 自学与组块的奥秘所在</title>
    <link href="https://www.hackdapp.com/archives/weekly09.html"/>
    <id>https://www.hackdapp.com/archives/weekly09.html</id>
    <published>2019-03-02T16:00:00.000Z</published>
    <updated>2019-04-04T23:37:30.227Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>知识模块化，然后通过拼积木的形式完成知识的构建。而其衔接方式才是其价值所在。</p></blockquote><hr><h2 id="信息列表"><a href="#信息列表" class="headerlink" title="信息列表"></a>信息列表</h2><ol><li><a href="http://www.xinli001.com/info/100315655" target="_blank" rel="noopener">掌握“组块”概念，让自学效率翻倍</a></li><li><a href="https://www.jianshu.com/p/8edd738d28d5" target="_blank" rel="noopener">组块，学习新知的利器</a></li><li><a href="https://www.coursera.org/lecture/ruhe-xuexi/shi-yao-shi-zu-kuai-mKXiU" target="_blank" rel="noopener">学会如何学习：帮助你掌握复杂学科的强大智力工具（Learning How to Learn）</a></li><li><a href="https://zhuanlan.zhihu.com/p/25057988" target="_blank" rel="noopener">天才的共同点：记忆组块的组合</a></li><li><a href="https://vimeo.com/100521066" target="_blank" rel="noopener">THINKING MAPS OVERVIEW- DAVID HYERLE on Vimeo</a><br>Watch this 3 minute video clip for an overview of David Hyerle explaining the 8 Thinking Maps as tools for lifelong learning.</li></ol><h2 id="感"><a href="#感" class="headerlink" title="感"></a>感</h2><p>不要以为你有大块时间才觉得可以让自己成长。其实很可能在找托辞，我们总会找一堆理由来让自己更心安理得。</p>]]></content>
    
    <summary type="html">
    
      本周最大的收获就是：将知识模块化，然后通过拼积木的形式完成知识的构建. 不仅要学会如何学习， 还需要学会如何维护自己的知识树。想念这不是是一下子可以完成的事，而需要在不断的迭代过程中逐渐去升级优化的。HackDApp愿与你分享！
    
    </summary>
    
      <category term="学习周报(2019)" scheme="https://www.hackdapp.com/categories/%E5%AD%A6%E4%B9%A0%E5%91%A8%E6%8A%A5-2019/"/>
    
    
      <category term="学习周报" scheme="https://www.hackdapp.com/tags/%E5%AD%A6%E4%B9%A0%E5%91%A8%E6%8A%A5/"/>
    
      <category term="组块最全资料" scheme="https://www.hackdapp.com/tags/%E7%BB%84%E5%9D%97%E6%9C%80%E5%85%A8%E8%B5%84%E6%96%99/"/>
    
      <category term="自学底层概念认知（相当重要）" scheme="https://www.hackdapp.com/tags/%E8%87%AA%E5%AD%A6%E5%BA%95%E5%B1%82%E6%A6%82%E5%BF%B5%E8%AE%A4%E7%9F%A5%EF%BC%88%E7%9B%B8%E5%BD%93%E9%87%8D%E8%A6%81%EF%BC%89/"/>
    
  </entry>
  
  <entry>
    <title>学习周报-08W: 构建完整知识架构</title>
    <link href="https://www.hackdapp.com/archives/weekly08.html"/>
    <id>https://www.hackdapp.com/archives/weekly08.html</id>
    <published>2019-02-23T16:38:26.000Z</published>
    <updated>2019-04-04T23:37:26.424Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>对于单个知识点虽然你觉得重要，但很可能会遗忘。但如果是串在一起的一个完整的知识架构，我们总是能从关联线索中快速找到它并得以应用。所以不要让任何知识变得那么孤立存在。信息孤岛对于我们而言没有任何价值。</p></blockquote><hr><h2 id="信息列表"><a href="#信息列表" class="headerlink" title="信息列表"></a>信息列表</h2><ol><li><a href="http://knowledge.cryptokylin.io/topics/115" target="_blank" rel="noopener">EOS 合约内 string 转换为 capi_checksum256， capi_signature， capi_public_key · 麒麟知识库 - EOS, 技术社区, CryptoKylin</a></li><li><a href="https://www.jfq.com/college/other/18703.shtml" target="_blank" rel="noopener">数字货币k线图 看得懂的才叫投资_聚富财经</a><br>开发交易所所必须知识的一些专业指标信息</li><li><a href="https://elevenews.com/2018/11/21/the-only-eos-smart-contract-guide-youd-need-to-read/" target="_blank" rel="noopener">The Only EOS Smart Contract Guide You’d Need to Read | ELEVENEWS</a><br>EOS合约开发安全注意事项</li></ol><h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2>]]></content>
    
    <summary type="html">
    
      本周最大的收获就是：构建完整的知识架构，让每一个知识点都有线索可查，建立关联回路，达到快速检索与使用。HackDApp愿与你分享！
    
    </summary>
    
      <category term="学习周报(2019)" scheme="https://www.hackdapp.com/categories/%E5%AD%A6%E4%B9%A0%E5%91%A8%E6%8A%A5-2019/"/>
    
    
      <category term="学习周报" scheme="https://www.hackdapp.com/tags/%E5%AD%A6%E4%B9%A0%E5%91%A8%E6%8A%A5/"/>
    
      <category term="K线图指标" scheme="https://www.hackdapp.com/tags/K%E7%BA%BF%E5%9B%BE%E6%8C%87%E6%A0%87/"/>
    
      <category term="EOS字符串转换(capi_signature，capi_public_key)" scheme="https://www.hackdapp.com/tags/EOS%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E6%8D%A2-capi-signature%EF%BC%8Ccapi-public-key/"/>
    
      <category term="EOS安全注意事项" scheme="https://www.hackdapp.com/tags/EOS%E5%AE%89%E5%85%A8%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/"/>
    
  </entry>
  
  <entry>
    <title>学习周报-07W: 持续更新的价值</title>
    <link href="https://www.hackdapp.com/archives/weekly07.html"/>
    <id>https://www.hackdapp.com/archives/weekly07.html</id>
    <published>2019-02-16T16:00:00.000Z</published>
    <updated>2019-04-04T23:37:22.921Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>学会价值导向，优质资源往往都向优质人群聚焦。</p></blockquote><hr><h2 id="信息列表"><a href="#信息列表" class="headerlink" title="信息列表"></a>信息列表</h2><ul><li>fairdicegame/fairdicegame.hpp at e081535681ba5c661b3d51cfac5e03e3e266acd9 · Dappub/fairdicegame<br>EOSDApp开发可参考示例，从别人的代码中永远可以看到自己需要成长的点</li><li>public key - How to transfer token and do some action inline?Or how to parse string to signature and publickey? - EOS.IO Stack Exchange<br><a href="https://eosio.stackexchange.com/questions/3304/how-to-transfer-token-and-do-some-action-inlineor-how-to-parse-string-to-signat" target="_blank" rel="noopener">https://eosio.stackexchange.com/questions/3304/how-to-transfer-token-and-do-some-action-inlineor-how-to-parse-string-to-signat</a><br>解决EOS签名验证问题<br><img src="http://cdn.hackdapp.com/2019-04-01-223231.jpg" alt=""></li></ul><h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2>]]></content>
    
    <summary type="html">
    
      本周最大的收获就是：持续更新的价值. 只有持续不断的创造价值内容，别人才会认为你不是一团死水，才会认可可以带来更优质的价值信息。但这一过程唯需要两件事：1.持续性 2.筛选优质资源。 HackDApp愿与你分享！
    
    </summary>
    
      <category term="学习周报(2019)" scheme="https://www.hackdapp.com/categories/%E5%AD%A6%E4%B9%A0%E5%91%A8%E6%8A%A5-2019/"/>
    
    
      <category term="学习周报" scheme="https://www.hackdapp.com/tags/%E5%AD%A6%E4%B9%A0%E5%91%A8%E6%8A%A5/"/>
    
  </entry>
  
  <entry>
    <title>重塑思维：自律 VS 习惯</title>
    <link href="https://www.hackdapp.com/archives/rebuildbrain_habit.html"/>
    <id>https://www.hackdapp.com/archives/rebuildbrain_habit.html</id>
    <published>2019-02-14T07:46:39.000Z</published>
    <updated>2019-04-04T23:36:28.210Z</updated>
    
    <content type="html"><![CDATA[<p><strong>自律使我压抑，习惯助我成长。</strong> 自律与习惯，其实目标都是一致的，只是所产生的行动动力源是不相同的。</p><p>相信每个人都在不停的思考一个问题，“我如何才能使明天的自己比今天的自己更加优秀一些呢？”</p><p>为了让自己变得更好，我们去总结规律，改变自我认知，希望能从不断的思维升级过程中，锻造出属于自己的思维工具，培养及丰富问题症结的方案库。</p><p>为了让自己变得更好，我们需要靠意志去坚持去做一件让自己变得优秀的事情，但你发现一段时间之后，这件事不了了知，扔那儿放下了，因为这样的事在我的人生当中简直太熟悉不过了。</p><p>相反，有一些行为却长期固化下来了，比如我们的一些日常洗漱习惯，即使你中途有一段时间没去做，那你也不会放弃这件事。</p><p>当某一种行为已经成为你的习惯时，如果你有意识的去观察一下，会发现一些许规律。比如：刷牙，可能现在没有不早晚刷牙的童鞋吧。不妨想一想这个行为大家保持了多少年，到现在是否还需要各种精神动力去推着自己去做这个事吗？</p><p>明显不需要，可以说这已经是写入自己骨头里的一种惯性行为，你要是不注意都不发现它原来其实就是一个号的学习榜样。因为它太习以为常了，平常的都忘掉它的存在。</p><p>那既然刷牙可以养成习惯，那我们其他行为为啥就不能养成一种习惯呢？</p><p>首先，处于习惯性的行为执行过程并不会让你特别有心理负担；<br>其次，习惯中的行为并不会消耗自己稀缺的精力；<br>最后，行为关联及导向性。也就是习惯行为之间的联动开关。比如：洗漱的时候总能与刷牙这件事产生一定的链接，而这个链接往往就是我们通过意识去不断增强脑回路而形成的。</p><p>之所以总结这些，就是因为我身上的一件事，当时看李笑来的专栏里曾经提到一种感受，就是“不做这件事就难受”。 当时是在是无法理解这种状态，除了吃饭这件事，找不出天天不做就难受的事来，当你无法从自身找到可以参考的例子时，你总是无法理解其概念。</p><p>直到我发现身上这件事，<code>刮胡子</code>。对，你没看错，就是刮胡子。</p><p>为什么讲呢？因为之前总是用电动剃须刀，总是容易忘记用，时做时不做的，而且刮的也不是太干净。直到有一天看到京东做活动卖手动剃须刀，想着买来试一试，但当时也犹豫，每天早上用这个会不会特花时间啊。</p><p>但事实证明，相比电动剃须刀，手动的虽然要麻烦一些，时间也要多花费一些。但这件事我却坚持了一年，直至今日从心理感受来讲，自己并没有感觉每天要逼着自己去做这件事，而是很自觉的每天洗漱后自动进入刮胡子状态。</p><p>为什么会这样呢？因为每一次刮完胡子，对着镜子一照，感觉干净清爽，漂亮，帅气。让我从内心看到一个舒服的自己，这算不算是一种仪式感呢。</p><p>后来，我总结了一下习惯养成的一个关键因素：持续的心理反馈。反馈可以让我们感受到变化与进步，或是一种心理满足；而持续性一来可以增强行为的动力，二过可以慢慢促进脑回路的链接建立。</p><p>那么，如何建立自己的习惯养成路径呢？那就是</p><ol><li>先制定一个你绝对认可其价值的目标；</li><li>在意识中建立诱导因子，也就是你需要在已形成的习惯之中，建立一个与新行动的触感连接；</li><li>持续反馈，每天都要总结，让自己内心见证成长，而后通过持续达到巩固行动的动力。</li></ol><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>好的习惯、应用技巧及思维方式是可以产生复利效应价值的，关键在于它不是形式上的应用，不是为技巧而技巧，一定是在我们的生活或工作实际场景中解决实际问题，并以此不断反馈价值收获，而持续的价值收益又会加强我们执行的动力，最终形成一个正向向上的良性循环♻️。</p><p>执行力其实是落实行动的第一要素，所以我们需要学会如何去补充这项能源。而最好的方式就是让自己认可这件事的价值。并且能够在做事的过程中，有深刻的反馈与心理感受，学会记录自己的心理变化。</p><p>最后，通过不断的执行与反馈，增强我们的脑回路链接。久而久之，就会成为我们的习惯。</p>]]></content>
    
    <summary type="html">
    
      本周最大的收获就是：搞清楚自律与习惯间的转换逻辑。明白靠自律去约束自己只能不断内耗意志力，相反如果通过打造系统逻辑，形成习惯便可从根本上提高效率。因为本身习惯不消耗意志力而是一种肌肉反应能力。HackDApp愿与你分享！
    
    </summary>
    
      <category term="思维认知" scheme="https://www.hackdapp.com/categories/%E6%80%9D%E7%BB%B4%E8%AE%A4%E7%9F%A5/"/>
    
    
      <category term="重塑思维" scheme="https://www.hackdapp.com/tags/%E9%87%8D%E5%A1%91%E6%80%9D%E7%BB%B4/"/>
    
      <category term="自律与习惯" scheme="https://www.hackdapp.com/tags/%E8%87%AA%E5%BE%8B%E4%B8%8E%E4%B9%A0%E6%83%AF/"/>
    
      <category term="思维认知" scheme="https://www.hackdapp.com/tags/%E6%80%9D%E7%BB%B4%E8%AE%A4%E7%9F%A5/"/>
    
  </entry>
  
  <entry>
    <title>学习周报-06W: 在反思中获取成长</title>
    <link href="https://www.hackdapp.com/archives/weekly06.html"/>
    <id>https://www.hackdapp.com/archives/weekly06.html</id>
    <published>2019-02-09T16:00:00.000Z</published>
    <updated>2019-04-04T23:37:19.321Z</updated>
    
    <content type="html"><![CDATA[<blockquote></blockquote><ul><li style="list-style: none"><input type="checkbox"> paritytech/parity-bridge: Bridge between any two ethereum-based networks<pre><code>如何桥接两个以太坊网络</code></pre></li><li style="list-style: none"><input type="checkbox"> 以下30个问题，便于自媒体人、内容创业者、想打造个人品牌的人，系统地梳理自己的模式，以及做复盘和反思。当然，在职场上班的朋友也可以参考。</li></ul><hr><h3 id="新媒体人如何系统地做复盘和反思？这里有30个关键词-30个问题"><a href="#新媒体人如何系统地做复盘和反思？这里有30个关键词-30个问题" class="headerlink" title="新媒体人如何系统地做复盘和反思？这里有30个关键词+30个问题"></a>新媒体人如何系统地做复盘和反思？这里有30个关键词+30个问题</h3><p>随便聊聊 来一篇精华 思维模型</p><p>Written by：V先生<br>ChangeLog：20190126-2210</p><p>Tag：底层逻辑​，清单，思维模型​，互联网​，新媒体​，自媒体​，社群​，电商​，个人品牌​，产品，商业模式​，变现​，生意经​，工作效率​，复盘，创业，创业者，方法论，团队管理，目标，行动，模板<br>——<br>以下30个问题，便于自媒体人、内容创业者、想打造个人品牌的人，系统地梳理自己的模式，以及做复盘和反思。当然，在职场上班的朋友也可以参考。<br>——</p><p>01、【目标】你到底想做什么？如何用数字来表达你的目标？（如读100本书的100、赚50万的50万、涨粉10万的10万，都是明确的数字）</p><p>02、【任务】为了实现目标，需要拆解为哪些任务？其中关键任务是哪一个？</p><p>03、【每天三件事】任务需要落实在每一天的行动中，那么每天必做的最重要的三件事是什么？</p><p>04、【时间】你总共有多少时间？</p><p>05、【注意力】有效利用起来了多少时间？</p><p>06、【效率】利用的时间里出了多少活？有没有借助提高效率的流程图和科技工具？</p><p>07、【输出】出的成果是自己用（价值积累）还是卖出去（价值变现）了？</p><p>08、【产品】如果卖出去，呈现为什么产品或者服务？如果产品或服务多，可以梳理为几条产品线？</p><p>09、【目标用户】卖给谁？to b 还是 to c？他们在哪？怎么让他们知道你和你的产品？</p><p>10、【种子用户】第一批用户在哪？怎么找到他们？</p><p>11、【需求】卖出去是不是别人需要的？是高频还是低频？有没有抓住痛点？</p><p>12、【换位思考】从用户角度调研和思考，他们买单的理由有哪些？为什么买你的不买别人的？</p><p>13、【价值】如何确保你的产品或服务，真正解决用户的问题？</p><p>14、【成本与回报】卖出去卖了多少钱？花了多少成本？</p><p>15、【赛道】这些活是否聚焦在一个方向上？这个方向属于什么赛道？</p><p>16、【商业模式】这个方向具体表现为什么商业模式？（可以商业模式画布梳理）</p><p>17、【标签】这个模式提炼为什么标签（一个Logo、一个名字、一句slogan）对外宣传？每一次广告、互动和交易，是否让别人更深刻地记住你的标签？</p><p>18、【品牌宣传】通过什么文案、海报、故事、金句、歌曲、gif表情包、直播、短视频、户外广告、电子书、书，去宣传你和你的产品？</p><p>19、【复利】所做的事情有长期的复利还是一锤子买卖？</p><p>20、【学习型团队】所有环节都是你一个人亲力亲为还是授权给团队？团队如何分工、如何协作？团队的沟通原则是什么？有没有记录运营日记、写周报？有没有联机学习、联机思考、联机复盘？</p><p>21、【外包】是否把其中部分缓解外包给专业公司、专业的人，以确保自己专注于核心能力？</p><p>22、【趋势】时代正在发生或即将到来的风口有哪些？有没有借助大周期、小趋势、平台红利之力？</p><p>23、【数据】做的过程中，有没有及时收集、记录和分析相关数据，用数据驱动增长？</p><p>24、【系统】有没有建立并迭代你的系统，包括原则、思维模型、最小必要知识、知识体系、数据库、个人流程图、团队流程图、工具清单、人脉档案、商业模式画布…？</p><p>25、【底层逻辑】你是否清晰地认知到，手头事情的本质、关键要素、其中各个要素的关系？</p><p>26、【市场容量】你赖以吃饭的事情，竞争对手有多少？市场容量有多大？</p><p>27、【能力圈】在此过程中，你是否找到了你的能力圈，能力圈内最擅长、最能做到极致的一件事是什么？（精力、认知、技能、团队、资源、人脉、资金方面的）局限是什么？</p><p>28、【竞争力】如何在市场上建立你的护城河，以保持持久的竞争力？</p><p>29、【升级】如何升级你的商业模式、产品、团队管理、服务、用户体验、运营、推广？如何做到10倍好？</p><p>30、【流量池】下一批用户从哪里来？是否有储备自己的流量池，以及外部可以投放的渠道？</p><p>——</p><p>附图：1984年，袁庚在深圳蛇口竖起的标语“时间就是金钱，效率就是生命”，已成为一个时代的文化坐标，至今激励着无数中国人闯过风云、创新前行。</p><p>——<br>欢迎生财有术的圈友们加微信交流，<br>ID：zorbabuddha（注明：生财有术）</p>]]></content>
    
    <summary type="html">
    
      本周最大的收获就是： 新媒体人如何系统地做复盘和反思。 或许每个人都该问问自己是不是在不断的重复之前的错误，没有去复盘总结过去的想经验与教训，那就是对自己人生时间的浪费。 HackDApp愿与你分享！
    
    </summary>
    
      <category term="学习周报(2019)" scheme="https://www.hackdapp.com/categories/%E5%AD%A6%E4%B9%A0%E5%91%A8%E6%8A%A5-2019/"/>
    
    
      <category term="学习周报" scheme="https://www.hackdapp.com/tags/%E5%AD%A6%E4%B9%A0%E5%91%A8%E6%8A%A5/"/>
    
      <category term="复盘和反思（30个关键字+30个问题）" scheme="https://www.hackdapp.com/tags/%E5%A4%8D%E7%9B%98%E5%92%8C%E5%8F%8D%E6%80%9D%EF%BC%8830%E4%B8%AA%E5%85%B3%E9%94%AE%E5%AD%97-30%E4%B8%AA%E9%97%AE%E9%A2%98%EF%BC%89/"/>
    
  </entry>
  
  <entry>
    <title>学习周报-05W: 切勿急躁万事慢来</title>
    <link href="https://www.hackdapp.com/archives/weekly05.html"/>
    <id>https://www.hackdapp.com/archives/weekly05.html</id>
    <published>2019-02-02T16:00:00.000Z</published>
    <updated>2019-04-04T23:37:16.180Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>先写点，然后再成线， 最后成面。万事皆一也。</p></blockquote><hr><h2 id="信息列表"><a href="#信息列表" class="headerlink" title="信息列表"></a>信息列表</h2><ul><li style="list-style: none"><input type="checkbox"> <a href="https://cosmos.network/" target="_blank" rel="noopener">https://cosmos.network/</a></li><li style="list-style: none"><input type="checkbox"> termit commos<br><a href="https://tendermint.com/docs/introduction/" target="_blank" rel="noopener">https://tendermint.com/docs/introduction/</a><br>Tendermint is software for securely and consistently replicating an application on many machines. By securely, we mean that Tendermint works even if up to 1/3 of machines fail in arbitrary ways. By consistently, we mean that every non-faulty machine sees the same transaction log and computes the same state. Secure and consistent replication is a fundamental problem in distributed systems; it plays a critical role in the fault tolerance of a broad range of applications, from currencies, to elections, to infrastructure orchestration, and beyond.</li><li style="list-style: none"><input type="checkbox"> mj 小小熊<br><a href="https://www.jianshu.com/p/33382c29afb5" target="_blank" rel="noopener">https://www.jianshu.com/p/33382c29afb5</a></li><li style="list-style: none"><input type="checkbox"> 以太坊的分片 - 简书VMC合约<br><a href="https://www.jianshu.com/p/fc6ce8b38129" target="_blank" rel="noopener">https://www.jianshu.com/p/fc6ce8b38129</a></li><li style="list-style: none"><input type="checkbox"> <a href="https://www.jianshu.com/p/13e532039fe2" target="_blank" rel="noopener">【众说区块链】以太坊分片技术提升100倍处理效率，有多大作用？ - 简书</a></li><li style="list-style: none"><input type="checkbox"> <a href="https://ci-jie.github.io/2018/05/21/%E5%9C%A8-PoA-Ethereum-%E5%8A%A0%E5%85%A5%E4%BF%A1%E4%BB%BB%E7%AF%80%E9%BB%9E/" target="_blank" rel="noopener">在 PoA Ethereum 加入信任節點 | James’s Blog</a></li></ul><h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><ol><li>学习还是要坚持下去的 至于学什么怎么学是自己的事 要对自己的选择负责</li><li>有效的可持续的学习方法 是给要学的知识 建立知识体系 即 一棵棵的知识树</li><li>MJ老师的这堂超级数字力课 也许是你应该最先学的课程之一 这棵树种的越早越好</li><li>关于学习的知识树方法论 可以去搜特斯拉的 Elon Musk 也可以去搜 小能熊</li><li>树种下去 只是开始 不断使用才能常青 不断修整才能茂盛 ⑧<br><a href="https://www.jianshu.com/p/fc6ce8b38129" target="_blank" rel="noopener">https://www.jianshu.com/p/fc6ce8b38129</a></li></ol>]]></content>
    
    <summary type="html">
    
      本周最大的收获就是：人生的跳跃取决于平凡生活的点点积累。切勿急躁，注重日常知识积累，打磨心智。cosmos.network。HackDApp愿与你分享！
    
    </summary>
    
      <category term="学习周报(2019)" scheme="https://www.hackdapp.com/categories/%E5%AD%A6%E4%B9%A0%E5%91%A8%E6%8A%A5-2019/"/>
    
    
      <category term="学习周报" scheme="https://www.hackdapp.com/tags/%E5%AD%A6%E4%B9%A0%E5%91%A8%E6%8A%A5/"/>
    
      <category term="以太坊的分片简书VMC合约" scheme="https://www.hackdapp.com/tags/%E4%BB%A5%E5%A4%AA%E5%9D%8A%E7%9A%84%E5%88%86%E7%89%87%E7%AE%80%E4%B9%A6VMC%E5%90%88%E7%BA%A6/"/>
    
      <category term="公链技术" scheme="https://www.hackdapp.com/tags/%E5%85%AC%E9%93%BE%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>C++基础语法（EOS完全开发指南）</title>
    <link href="https://www.hackdapp.com/archives/eosdev_cplus_basic.html"/>
    <id>https://www.hackdapp.com/archives/eosdev_cplus_basic.html</id>
    <published>2019-01-28T10:16:50.000Z</published>
    <updated>2019-02-21T07:40:16.455Z</updated>
    
    <content type="html"><![CDATA[<p><code>Author: zhangliang | WeChat: rushking2009 | Mail: zhangliang@cldy.org</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* filename: myapp.cpp</span></span><br><span class="line"><span class="comment">   date: 2019-01-28 3:06 PM</span></span><br><span class="line"><span class="comment">   auth: zhangliang&lt;zhangliang@cldy.org&gt; */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt; //定义头文件</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;    <span class="comment">//命令空间, 简化后续变量或方法调用。e.g. std::string 等同于 string</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">string</span> msg = <span class="string">"hi, my first dapp"</span>; <span class="comment">//定义变量</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; msg &lt;&lt;<span class="built_in">endl</span>; <span class="comment">//打印字符串</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//tryit: http://tpcg.io/Tulum1</span></span><br></pre></td></tr></table></figure><p>以上代码便是C++最简单可运行的最小示例。基本包含了在程序结构中所必须的一些语言特性。</p><p>根据上述程序结构，我们可以大致将它拆分成五部分内容：</p><a id="more"></a><h2 id="1-include-lt-iostream-gt"><a href="#1-include-lt-iostream-gt" class="headerlink" title="1. #include &lt;iostream&gt;"></a>1. <code>#include &lt;iostream&gt;</code></h2><p>头文件定义主要用于引用第三方函数库，通过调用第三方函数可以减少开发代码量，提高开发效率，同时也避免了不必要的重复造轮子。</p><p>比如：通过引用<code>&lt;cmath&gt;</code>库，可以帮助我们快速使用里面的函数进行一些数学运算。</p><p><img src="https://ws3.sinaimg.cn/large/006tNc79ly1fzmer35re6j30l30j6myt.jpg" alt="函数列表"></p><p>所以，后续我们需要学会便是如何查阅C++文档库，不断积累与完善对于第三方标准库的方法学习与理解。</p><h2 id="2-int-main"><a href="#2-int-main" class="headerlink" title="2. int main()"></a>2. <code>int main()</code></h2><p><code>main</code>函数区别于其它普通函数之处在于: main函数默认被系统定义为应用入口调用方法。除此之外，与其他函数无任何区别。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">sayHi</span><span class="params">(<span class="built_in">string</span> username)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">string</span>(<span class="string">"hi, "</span>).append(username).append(<span class="string">"!"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; sayHi(<span class="string">"www.hackdapp.com"</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//tryit: http://tpcg.io/uHUkzy</span></span><br></pre></td></tr></table></figure><p>函数定义，其实对于所有编程语言的定义方式大致相同, 都可以表现为以下形式</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;返回类型|<span class="keyword">void</span>&gt; 方法名(参数定义<span class="number">1</span>, 参数定义<span class="number">2</span>，参数定义...)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//do some stuff</span></span><br><span class="line">    <span class="keyword">return</span> &lt;返回数据&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果你之前已经在使用其他编程语言，那么应该对于C++其实也可以很好的理解它的程序结构。</p><p>注： 在后续的第二部分，我们会详细介绍函数的多种定义及使用方式，包括形参实参、重载以及虚函数等。</p><h2 id="3-string-message-quot-hi-my-first-app-quot"><a href="#3-string-message-quot-hi-my-first-app-quot" class="headerlink" title="3. string message = &quot;hi, my first app&quot;"></a>3. <code>string message = &quot;hi, my first app&quot;</code></h2><p>变量定义，在程序开发过程，往往需要定义一些临时变量，用于存储在数据逻辑处理过程所必须的临时存储。</p><p>而变量的类型，主要分为字符、整型，长/短整型、单精度、双精度、布尔类型以及字符串。<br>我们在实际应用场景中，需要明确了解与知道这些基础数据类型的定义及边界范围，比如，无符号整型、单精度。</p><p>尤其是对数字类型的字段，如果不了解其边界范围，很可能会导致运算溢出等问题，特别是在合约开发过程中，数字溢出很可能导致的便是相当大的经济损失。</p><p>换个角度讲，合理的使用变量类型，也可能在一定程序中节省资源的浪费。因为在EOS合约中存储数据是需要消耗资源的。</p><p>另外，对于变量的名称定义，其名称只能是由数字、字母以及下划线组成且不可能以数字开头，而且根据不同平台，对于名称的长度其实也是存在限制的。</p><h2 id="4-cout-lt-lt-msg-lt-lt-endl"><a href="#4-cout-lt-lt-msg-lt-lt-endl" class="headerlink" title="4. cout &lt;&lt; msg &lt;&lt;endl"></a>4. <code>cout &lt;&lt; msg &lt;&lt;endl</code></h2><p><code>cout</code>是<code>iostream</code>函数库中的一个流数据输出函数，一般用于在程序调用过程向控制台输入一些调试信息；与此对应的是<code>cin</code>, 用于接收输入数据流。</p><p>不过, 在EOS合约中无法调用此函数。举而代之的是，EOSLIB库自己封装的<code>print</code>函数.</p><h2 id="5-单行注解-or-多行注解"><a href="#5-单行注解-or-多行注解" class="headerlink" title="5. //单行注解 or /*多行注解*/"></a>5. <code>//单行注解 or /*多行注解*/</code></h2><p>在程序开发过程，往往需要通过语言描述某个代码文件所要实现的整体功能或者某个函数的功能、参数及约束说明。这时候就需要用到注解。</p><p>而注解同样也所有的编程语言中也大致相同，一般分为单行注释与多行注释。</p><p>单行注释适用于短小的描述某一行运行逻辑；而多行注释多用于描述函数说明以及文件功能说明。</p><hr><p><code>注：</code> 在教程中如出现不易理解或存在错误的问题🐛，欢迎评论留言！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;Author: zhangliang | WeChat: rushking2009 | Mail: zhangliang@cldy.org&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* filename: myapp.cpp&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;   date: 2019-01-28 3:06 PM&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;   auth: zhangliang&amp;lt;zhangliang@cldy.org&amp;gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;iostream&amp;gt; //定义头文件&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;;    &lt;span class=&quot;comment&quot;&gt;//命令空间, 简化后续变量或方法调用。e.g. std::string 等同于 string&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt; msg = &lt;span class=&quot;string&quot;&gt;&quot;hi, my first dapp&quot;&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;//定义变量&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; msg &amp;lt;&amp;lt;&lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;//打印字符串&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//tryit: http://tpcg.io/Tulum1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;以上代码便是C++最简单可运行的最小示例。基本包含了在程序结构中所必须的一些语言特性。&lt;/p&gt;
&lt;p&gt;根据上述程序结构，我们可以大致将它拆分成五部分内容：&lt;/p&gt;
    
    </summary>
    
      <category term="EOS完全开发指南" scheme="https://www.hackdapp.com/categories/EOS%E5%AE%8C%E5%85%A8%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97/"/>
    
    
      <category term="EOS完全开发指南" scheme="https://www.hackdapp.com/tags/EOS%E5%AE%8C%E5%85%A8%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97/"/>
    
      <category term="C++导读" scheme="https://www.hackdapp.com/tags/C-%E5%AF%BC%E8%AF%BB/"/>
    
      <category term="EOS合约开发教程" scheme="https://www.hackdapp.com/tags/EOS%E5%90%88%E7%BA%A6%E5%BC%80%E5%8F%91%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>C++导读（EOS完全开发指南）</title>
    <link href="https://www.hackdapp.com/archives/eosdev_cplus_intro.html"/>
    <id>https://www.hackdapp.com/archives/eosdev_cplus_intro.html</id>
    <published>2019-01-28T10:08:35.000Z</published>
    <updated>2019-01-28T10:56:43.903Z</updated>
    
    <content type="html"><![CDATA[<p><code>Author: zhangliang | WeChat: rushking2009 | Mail: zhangliang@cldy.org</code></p><p>本章节内容主要是带大家了解C++整个编程语言的体系架构，对C++编程语言有个整体的大致的认识与理解。另外，也是帮助大家在开发EOS智能合约之前做一下前期预习，易于对后面EOS合约的快速上手。</p><p>另外，需要说明的是，因为本身EOS智能合约是在一个沙箱机制中运行，所以它对一些标准函数库的方法进行了一些限制。所以可能导致大家可能在网上找的资料中的方法无法在合约中正常执行。</p><a id="more"></a><p>另一个角度讲，正是由于这种限制，也是减小了我们的学习范围，这样我们就不需要完全掌握的整个C++的语言体系，便可以开发智能合约。比如：文件操作读取，时间函数，随机数，这些在EOS合约里是都不可用的。 不过，有一个问题就是你无法明确知道哪些功能被禁用了，只能去试。或者官网有说明，可能我没有看到而已。</p><p>在整个开发过程，你只需要学会使用一些基础语法，简单数据类型、数据结构以及常用的一些工具库。比如：如何处理字符串，如何存储或操作数据结构。</p><p>除此之外，再掌握一些程序设计技巧，就可以实战开发自己的DApp应用了，而本身程序设计其实是与哪种程序语言不存在直接关系的，只是让你的程序有更好的应对扩展。</p><p>通过本章节内容你可以学会：</p><ul><li>对基础数据类型以及它们的数据边界有清晰的认识;</li><li>学会如何使用不同数据结构处理业务场景中的问题；</li><li>学会如何定义自己的函数；</li><li>学会如何面对对象的思维设计自己的合约；</li><li>学会如何通过模板封装形成自己的工具库；</li><li>了解一些常用的标准库文件及常用的函数工具方法；</li><li>学会如何通过手册查找工具函数</li></ul><hr><p>本章节，将会从以下八个部分进行分类介绍：</p><p>1.1 C++基础语法<br>1.2 基础数据类型及变量、常量定义<br>1.3 结构体及函数定义<br>1.4 数据结构<br>1.5 面向对象编程<br>1.6 高级应用(模板定义)<br>1.7 标准库及库函数<br>1.8 资源及经验分享</p><hr><p><code>注：</code> 在教程中如出现不易理解或存在错误的问题🐛，欢迎评论留言！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;Author: zhangliang | WeChat: rushking2009 | Mail: zhangliang@cldy.org&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;本章节内容主要是带大家了解C++整个编程语言的体系架构，对C++编程语言有个整体的大致的认识与理解。另外，也是帮助大家在开发EOS智能合约之前做一下前期预习，易于对后面EOS合约的快速上手。&lt;/p&gt;
&lt;p&gt;另外，需要说明的是，因为本身EOS智能合约是在一个沙箱机制中运行，所以它对一些标准函数库的方法进行了一些限制。所以可能导致大家可能在网上找的资料中的方法无法在合约中正常执行。&lt;/p&gt;
    
    </summary>
    
      <category term="EOS完全开发指南" scheme="https://www.hackdapp.com/categories/EOS%E5%AE%8C%E5%85%A8%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97/"/>
    
    
      <category term="EOS完全开发指南" scheme="https://www.hackdapp.com/tags/EOS%E5%AE%8C%E5%85%A8%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97/"/>
    
      <category term="C++导读" scheme="https://www.hackdapp.com/tags/C-%E5%AF%BC%E8%AF%BB/"/>
    
      <category term="EOS合约开发教程" scheme="https://www.hackdapp.com/tags/EOS%E5%90%88%E7%BA%A6%E5%BC%80%E5%8F%91%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
</feed>
